vs.1.1																								; LINEINFO(Eyes.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(2)
;	 c38	 = eyeball origin																											; LINEINFO(Eyes.vsh)(3)
;	 c39	 = eyeball up * 0.5																											; LINEINFO(Eyes.vsh)(4)
;	 c40	 = iris projection U																										; LINEINFO(Eyes.vsh)(5)
;	 c41	 = iris projection V																										; LINEINFO(Eyes.vsh)(6)
;	 c42	 = glint projection U																										; LINEINFO(Eyes.vsh)(7)
;	 c43	 = glint projection V																										; LINEINFO(Eyes.vsh)(8)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(9)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_color1 v6;																								; LINEINFO(macros.vsh)(50)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(18)
; Vertex blending (whacks r1-r7, positions in r7)																								; LINEINFO(Eyes.vsh)(19)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(20)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(631)
; 0 bone skinning (4 instructions)																								; LINEINFO(macros.vsh)(632)
;																								; LINEINFO(macros.vsh)(633)
; Transform position into world space																								; LINEINFO(macros.vsh)(634)
; position																								; LINEINFO(macros.vsh)(635)
dp4 r0.x, v0, c48																								; LINEINFO(macros.vsh)(636)
dp4 r0.y, v0, c49																								; LINEINFO(macros.vsh)(637)
dp4 r0.z, v0, c50																								; LINEINFO(macros.vsh)(638)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(639)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(24)
; Transform the position from world to view space																								; LINEINFO(Eyes.vsh)(25)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(26)
; AllocateRegister $projPos = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r1.x, r0, c8																								; LINEINFO(Eyes.vsh)(30)
dp4 r1.y, r0, c9																								; LINEINFO(Eyes.vsh)(31)
dp4 r1.z, r0, c10																								; LINEINFO(Eyes.vsh)(32)
dp4 r1.w, r0, c11																								; LINEINFO(Eyes.vsh)(33)
mov oPos, r1																								; LINEINFO(Eyes.vsh)(34)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(36)
; Normal is based on vertex position 																								; LINEINFO(Eyes.vsh)(37)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(38)
; AllocateRegister $worldNormal = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $normalDotUp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $normalDotUp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
sub r2, r0, c38		; Normal = (Pos - Eye origin)																								; LINEINFO(Eyes.vsh)(42)
dp3 r3, r2, c39		; Normal -= 0.5f * (Normal dot Eye Up) * Eye Up																								; LINEINFO(Eyes.vsh)(43)
mul r3, r3, c0.w																								; LINEINFO(Eyes.vsh)(44)
mad r2, -r3, c39, r2																								; LINEINFO(Eyes.vsh)(45)
; FreeRegister $normalDotUp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $normalDotUp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $normalDotUp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; normalize the normal																								; LINEINFO(Eyes.vsh)(49)
dp3 r2.w, r2, r2																								; LINEINFO(macros.vsh)(262)
rsq r2.w, r2.w																								; LINEINFO(macros.vsh)(263)
mul r2, r2, r2.w																								; LINEINFO(macros.vsh)(264)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(52)
; Lighting																								; LINEINFO(Eyes.vsh)(53)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(54)
; special case for no lighting																								; LINEINFO(macros.vsh)(1258)
; special case for static lighting only																								; LINEINFO(macros.vsh)(1267)
; Don't need to bother converting to linear space in this case.																								; LINEINFO(macros.vsh)(1268)
; AllocateRegister $linearColor = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $gammaColor = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; The static lighting comes in in gamma space and has also been premultiplied by c1.w																								; LINEINFO(macros.vsh)(1282)
; need to get it into																								; LINEINFO(macros.vsh)(1283)
; linear space so that we can do adds.																								; LINEINFO(macros.vsh)(1284)
rcp r4.w, c1.w																								; LINEINFO(macros.vsh)(1285)
mul r4.xyz, v6, r4.w																								; LINEINFO(macros.vsh)(1286)
; AllocateRegister $tmp = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
; $tmp = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Is rcp more expensive than just storing 2.2 somewhere and doing a mov?																								; LINEINFO(macros.vsh)(545)
rcp r4.w, c1.x							; r4.w = 2.2																								; LINEINFO(macros.vsh)(546)
lit r3.z, r4.zzzw						; r0.z = linear blue																								; LINEINFO(macros.vsh)(547)
lit r5.z, r4.yyyw							; r2.z = linear green																								; LINEINFO(macros.vsh)(548)
mov r3.y, r5.z							; r0.y = linear green																								; LINEINFO(macros.vsh)(549)
lit r5.z, r4.xxxw							; r2.z = linear red																								; LINEINFO(macros.vsh)(550)
mov r3.x, r5.z							; r0.x = linear red																								; LINEINFO(macros.vsh)(551)
; FreeRegister $tmp = r5																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Ambient lighting																								; LINEINFO(macros.vsh)(972)
; AllocateRegister $nSquared = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
; $nSquared = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $isNegative = r6																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
; $nSquared = r5																								; LINEINFO(macros.vsh)(191)
; $isNegative = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r5.xyz, r2.xyz, r2.xyz				; compute n times n																								; LINEINFO(macros.vsh)(976)
slt r6.xyz, r2.xyz, c0.x				; Figure out whether each component is >0																								; LINEINFO(macros.vsh)(977)
mov a0.x, r6.x																								; LINEINFO(macros.vsh)(978)
mad r3.xyz, r5.x, c[a0.x + 21], r3			; r3 = normal[0]*normal[0] * box color of appropriate x side																								; LINEINFO(macros.vsh)(981)
mov a0.x, r6.y																								; LINEINFO(macros.vsh)(987)
mad r3.xyz, r5.y, c[a0.x + 23], r3																								; LINEINFO(macros.vsh)(988)
mov a0.x, r6.z																								; LINEINFO(macros.vsh)(989)
mad r3.xyz, r5.z, c[a0.x + 25], r3																								; LINEINFO(macros.vsh)(990)
; FreeRegister $isNegative = r6																								; LINEINFO(macros.vsh)(224)
;	if( $isNegative ne g_allocatedname[r6] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r6																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $isNegative																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
; $nSquared = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $nSquared = r5																								; LINEINFO(macros.vsh)(224)
;	if( $nSquared ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $nSquared																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mov a0.x, c3.x																								; LINEINFO(macros.vsh)(1299)
; AllocateRegister $nDotL = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
; $nDotL = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; NOTE: Gotta use -l here, since light direction = -l																								; LINEINFO(macros.vsh)(1004)
; DIRECTIONAL LIGHT																								; LINEINFO(macros.vsh)(1005)
; compute n dot l																								; LINEINFO(macros.vsh)(1006)
dp3 r5.x, -c[a0.x + 1], r2																								; LINEINFO(macros.vsh)(1007)
; lambert																								; LINEINFO(macros.vsh)(1011)
max r5.x, r5.x, c0.x				; Clamp to zero																								; LINEINFO(macros.vsh)(1012)
mad r3.xyz, c[a0.x], r5.x, r3																								; LINEINFO(macros.vsh)(1027)
; FreeRegister $nDotL = r5																								; LINEINFO(macros.vsh)(224)
;	if( $nDotL ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $nDotL																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(1311)
; Output color (gamma correction)																								; LINEINFO(macros.vsh)(1312)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(1313)
; AllocateRegister $tmp = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
; $tmp = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mov r3.w, c1.x						; r3.w = 1.0/2.2																								; LINEINFO(macros.vsh)(564)
lit r4.z, r3.zzzw						; r0.z = gamma blue																								; LINEINFO(macros.vsh)(565)
lit r5.z, r3.yyyw						; r2.z = gamma green																								; LINEINFO(macros.vsh)(566)
mov r4.y, r5.z							; r0.y = gamma green																								; LINEINFO(macros.vsh)(567)
lit r5.z, r3.xxxw						; r2.z = gamma red																								; LINEINFO(macros.vsh)(568)
mov r4.x, r5.z							; r0.x = gamma red																								; LINEINFO(macros.vsh)(569)
; FreeRegister $tmp = r5																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $linearColor = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r4.xyz, r4.xyz, c1.w																								; LINEINFO(macros.vsh)(1322)
; ColorClamp; stomps .w																								; LINEINFO(macros.vsh)(951)
; Get the max of RGB and stick it in W																								; LINEINFO(macros.vsh)(955)
max r4.w, r4.x, r4.y																								; LINEINFO(macros.vsh)(956)
max r4.w, r4.w, r4.z																								; LINEINFO(macros.vsh)(957)
; get the greater of one and the max color.																								; LINEINFO(macros.vsh)(959)
max r4.w, r4.w, c0.y																								; LINEINFO(macros.vsh)(960)
rcp r4.w, r4.w																								; LINEINFO(macros.vsh)(962)
mul oD0.xyz, r4.w, r4.xyz																								; LINEINFO(macros.vsh)(963)
;	mov oD0.xyz, r3																								; LINEINFO(macros.vsh)(1326)
mov oD0.w, c0.y				; make sure all components are defined																								; LINEINFO(macros.vsh)(1327)
; FreeRegister $linearColor = r3																								; LINEINFO(macros.vsh)(224)
;	if( $linearColor ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $linearColor																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $gammaColor = r4																								; LINEINFO(macros.vsh)(224)
;	if( $gammaColor ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $gammaColor																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldNormal = r2																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(59)
; Fog																								; LINEINFO(Eyes.vsh)(60)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(61)
; CalcFog																								; LINEINFO(macros.vsh)(493)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(413)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(414)
; only r0.z is used out of worldPos																								; LINEINFO(macros.vsh)(416)
; AllocateRegister $tmp = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; This is simple similar triangles. Imagine a line passing from the point directly vertically																								; LINEINFO(macros.vsh)(429)
; and another line passing from the point to the eye position.																								; LINEINFO(macros.vsh)(430)
; Let d = total distance from point to the eye																								; LINEINFO(macros.vsh)(431)
; Let h = vertical distance from the point to the eye																								; LINEINFO(macros.vsh)(432)
; Let hw = vertical distance from the point to the water surface																								; LINEINFO(macros.vsh)(433)
; Let dw = distance from the point to a point on the water surface that lies along the ray from point to eye																								; LINEINFO(macros.vsh)(434)
; Therefore d/h = dw/hw by similar triangles, or dw = d * hw / h.																								; LINEINFO(macros.vsh)(435)
; d = projPos.w, h = eyepos.z - worldPos.z, hw = waterheight.z - worldPos.z, dw = what we solve for																								; LINEINFO(macros.vsh)(436)
; Now, tmp.x = hw, and tmp.y = h																								; LINEINFO(macros.vsh)(438)
add r2.xy, c2.wz, -r0.z																								; LINEINFO(macros.vsh)(439)
; if r2.x < 0, then set it to 0																								; LINEINFO(macros.vsh)(441)
; This is the equivalent of moving the vert to the water surface if it's above the water surface																								; LINEINFO(macros.vsh)(442)
max r2.x, r2.x, c0.x																								; LINEINFO(macros.vsh)(443)
; Now we have 1/h																								; LINEINFO(macros.vsh)(445)
rcp r2.z, r2.y																								; LINEINFO(macros.vsh)(446)
; Now we have d/h																								; LINEINFO(macros.vsh)(448)
mul r2.w, r1.w, r2.z																								; LINEINFO(macros.vsh)(449)
; We finally have d * hw / h																								; LINEINFO(macros.vsh)(451)
; r2.w is now the distance that we see through water.																								; LINEINFO(macros.vsh)(452)
mul r2.w, r2.x, r2.w																								; LINEINFO(macros.vsh)(453)
mad r2, -r2.w, c16.w, c16.y																								; LINEINFO(macros.vsh)(457)
min r2, r2, c0.y																								; LINEINFO(macros.vsh)(458)
max oFog, r2.x, c0.x																								; LINEINFO(macros.vsh)(459)
; FreeRegister $tmp = r2																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r1																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(67)
; Texture coordinates																								; LINEINFO(Eyes.vsh)(68)
; Texture 0 is the base texture																								; LINEINFO(Eyes.vsh)(69)
; Texture 1 is a planar projection used for the iris																								; LINEINFO(Eyes.vsh)(70)
; Texture 2 is a planar projection used for the glint																								; LINEINFO(Eyes.vsh)(71)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(72)
mov oT0, v7																								; LINEINFO(Eyes.vsh)(74)
dp4 oT1.x, c40, r0																								; LINEINFO(Eyes.vsh)(75)
dp4 oT1.y, c41, r0																								; LINEINFO(Eyes.vsh)(76)
dp4 oT2.x, c42, r0																								; LINEINFO(Eyes.vsh)(77)
dp4 oT2.y, c43, r0																								; LINEINFO(Eyes.vsh)(78)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

vs.1.1																								; LINEINFO(fillrate.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(fillrate.vsh)(6)
; Constants specified by the app																								; LINEINFO(fillrate.vsh)(7)
;    c0      = (0, 1, 2, 0.5)																								; LINEINFO(fillrate.vsh)(8)
;	 c1		 = (1/2.2, 3, 255, overbright factor)																								; LINEINFO(fillrate.vsh)(9)
;    c2      = camera position *in world space*																								; LINEINFO(fillrate.vsh)(10)
;    c4-c7   = modelViewProj matrix	(transpose)																								; LINEINFO(fillrate.vsh)(11)
;    c8-c11  = ViewProj matrix (transpose)																								; LINEINFO(fillrate.vsh)(12)
;    c12-c15 = model->view matrix (transpose)																								; LINEINFO(fillrate.vsh)(13)
;	 c16	 = [fogStart, fogEnd, fogRange, 1.0/fogRange]																								; LINEINFO(fillrate.vsh)(14)
;	 c38-c39 = Base texture transform																								; LINEINFO(fillrate.vsh)(15)
;    c40-c41 = Mask texture transform																								; LINEINFO(fillrate.vsh)(16)
;------------------------------------------------------------------------------																								; LINEINFO(fillrate.vsh)(17)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_blendweight v1;																								; LINEINFO(macros.vsh)(34)
dcl_blendindices v2;																								; LINEINFO(macros.vsh)(38)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(fillrate.vsh)(21)
; Vertex blending																								; LINEINFO(fillrate.vsh)(22)
;------------------------------------------------------------------------------																								; LINEINFO(fillrate.vsh)(23)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(643)
; 3 bone skinning  (19 instructions)																								; LINEINFO(macros.vsh)(644)
;																								; LINEINFO(macros.vsh)(645)
; AllocateRegister $boneIndices = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position into world space using all bones																								; LINEINFO(macros.vsh)(656)
; denormalize d3dcolor to matrix index																								; LINEINFO(macros.vsh)(657)
mad r1, v2, c3.z, c3.w																								; LINEINFO(macros.vsh)(658)
; r11 = boneindices at this point																								; LINEINFO(macros.vsh)(664)
; first matrix																								; LINEINFO(macros.vsh)(665)
mov a0.x, r1.z																								; LINEINFO(macros.vsh)(666)
mul r2, v1.x, c[a0.x]																								; LINEINFO(macros.vsh)(667)
mul r3, v1.x, c[a0.x+1]																								; LINEINFO(macros.vsh)(668)
mul r4, v1.x, c[a0.x+2]																								; LINEINFO(macros.vsh)(669)
; second matrix																								; LINEINFO(macros.vsh)(670)
mov a0.x, r1.y																								; LINEINFO(macros.vsh)(671)
mad r2, v1.y, c[a0.x], r2																								; LINEINFO(macros.vsh)(672)
mad r3, v1.y, c[a0.x+1], r3																								; LINEINFO(macros.vsh)(673)
mad r4, v1.y, c[a0.x+2], r4																								; LINEINFO(macros.vsh)(674)
; Calculate third weight																								; LINEINFO(macros.vsh)(676)
; compute 1-(weight1+weight2) to calculate weight2																								; LINEINFO(macros.vsh)(677)
; Use r1.w as a temp since we aren't using it for anything.																								; LINEINFO(macros.vsh)(678)
add r1.w, v1.x, v1.y																								; LINEINFO(macros.vsh)(679)
sub r1.w, c0.y, r1.w																								; LINEINFO(macros.vsh)(680)
; third matrix																								; LINEINFO(macros.vsh)(682)
mov a0.x, r1.x																								; LINEINFO(macros.vsh)(683)
mad r2, r1.w, c[a0.x], r2																								; LINEINFO(macros.vsh)(684)
mad r3, r1.w, c[a0.x+1], r3																								; LINEINFO(macros.vsh)(685)
mad r4, r1.w, c[a0.x+2], r4																								; LINEINFO(macros.vsh)(686)
dp4 r0.x, v0, r2																								; LINEINFO(macros.vsh)(688)
dp4 r0.y, v0, r3																								; LINEINFO(macros.vsh)(689)
dp4 r0.z, v0, r4																								; LINEINFO(macros.vsh)(690)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(691)
; FreeRegister $boneIndices = r1																								; LINEINFO(macros.vsh)(224)
;	if( $boneIndices ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $boneIndices																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix0 ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix0																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix1 ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix1																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix2 ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix2																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform the position from world to view space																								; LINEINFO(fillrate.vsh)(28)
dp4 oPos.x, r0, c8																								; LINEINFO(fillrate.vsh)(29)
dp4 oPos.y, r0, c9																								; LINEINFO(fillrate.vsh)(30)
dp4 oPos.z, r0, c10																								; LINEINFO(fillrate.vsh)(31)
dp4 oPos.w, r0, c11																								; LINEINFO(fillrate.vsh)(32)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

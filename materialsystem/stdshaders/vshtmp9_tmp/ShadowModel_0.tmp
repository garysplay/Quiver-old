vs.1.1																								; LINEINFO(ShadowModel.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(6)
; Constants specified by the app																								; LINEINFO(ShadowModel.vsh)(7)
;	 c38-c40 = Shadow texture matrix																								; LINEINFO(ShadowModel.vsh)(8)
;	 c41	 = Tex origin																								; LINEINFO(ShadowModel.vsh)(9)
;	 c42	 = Tex Scale																								; LINEINFO(ShadowModel.vsh)(10)
;	 c43	 = [Shadow falloff offset, 1/Shadow distance, Shadow scale, 0 ]																								; LINEINFO(ShadowModel.vsh)(11)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(12)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(16)
; Vertex blending (whacks r1-r7, positions in r7, normals in r8)																								; LINEINFO(ShadowModel.vsh)(17)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(18)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(714)
; 0 bone skinning (13 instructions)																								; LINEINFO(macros.vsh)(715)
;																								; LINEINFO(macros.vsh)(716)
; Transform position + normal + tangentS + tangentT into world space																								; LINEINFO(macros.vsh)(717)
; position																								; LINEINFO(macros.vsh)(718)
dp4 r0.x, v0, c48																								; LINEINFO(macros.vsh)(719)
dp4 r0.y, v0, c49																								; LINEINFO(macros.vsh)(720)
dp4 r0.z, v0, c50																								; LINEINFO(macros.vsh)(721)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(722)
; normal																								; LINEINFO(macros.vsh)(723)
dp3 r1.x, v3, c48																								; LINEINFO(macros.vsh)(724)
dp3 r1.y, v3, c49																								; LINEINFO(macros.vsh)(725)
dp3 r1.z, v3, c50																								; LINEINFO(macros.vsh)(726)
; Transform the position from world to view space																								; LINEINFO(ShadowModel.vsh)(23)
; AllocateRegister $projPos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r2.x, r0, c8																								; LINEINFO(ShadowModel.vsh)(26)
dp4 r2.y, r0, c9																								; LINEINFO(ShadowModel.vsh)(27)
dp4 r2.z, r0, c10																								; LINEINFO(ShadowModel.vsh)(28)
dp4 r2.w, r0, c11																								; LINEINFO(ShadowModel.vsh)(29)
mov oPos, r2																								; LINEINFO(ShadowModel.vsh)(30)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(32)
; Fog																								; LINEINFO(ShadowModel.vsh)(33)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(34)
; CalcFog																								; LINEINFO(macros.vsh)(493)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r3, -r2.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r3, r3, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r3.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(38)
; Transform position into texture space (from 0 to 1)																								; LINEINFO(ShadowModel.vsh)(39)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(40)
; AllocateRegister $texturePos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r2.x, r0, c38																								; LINEINFO(ShadowModel.vsh)(42)
dp4 r2.y, r0, c39																								; LINEINFO(ShadowModel.vsh)(43)
dp4 r2.z, r0, c40																								; LINEINFO(ShadowModel.vsh)(44)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(47)
; Figure out the shadow fade amount																								; LINEINFO(ShadowModel.vsh)(48)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(49)
; AllocateRegister $shadowFade = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
sub r0, r2.z, c43.x																								; LINEINFO(ShadowModel.vsh)(51)
mul r0, r0, c43.y																								; LINEINFO(ShadowModel.vsh)(52)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(54)
; Offset it into the texture																								; LINEINFO(ShadowModel.vsh)(55)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(56)
; AllocateRegister $actualTextureCoord = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
; $actualTextureCoord = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r3.xyz, c42, r2																								; LINEINFO(ShadowModel.vsh)(58)
add oT0.xyz, r3, c41																								; LINEINFO(ShadowModel.vsh)(59)
;mov oT0.xyz, r2																								; LINEINFO(ShadowModel.vsh)(60)
; FreeRegister $actualTextureCoord = r3																								; LINEINFO(macros.vsh)(224)
;	if( $actualTextureCoord ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $actualTextureCoord																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(63)
; We're doing clipping by using texkill																								; LINEINFO(ShadowModel.vsh)(64)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(65)
mov oT1.xyz, r2		; also clips when shadow z < 0 !																								; LINEINFO(ShadowModel.vsh)(66)
sub oT2.xyz, c0.y, r2																								; LINEINFO(ShadowModel.vsh)(67)
sub oT2.z, c0.y, r0.z	; clips when shadow z > shadow distance																									; LINEINFO(ShadowModel.vsh)(68)
; FreeRegister $texturePos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $texturePos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $texturePos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(71)
; We're doing backface culling by using texkill also (wow yucky)																								; LINEINFO(ShadowModel.vsh)(72)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(73)
; Transform z component of normal in texture space																								; LINEINFO(ShadowModel.vsh)(74)
; If it's negative, then don't draw the pixel																								; LINEINFO(ShadowModel.vsh)(75)
dp3 oT3, r1, -c40																								; LINEINFO(ShadowModel.vsh)(76)
; FreeRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(79)
; Shadow color, falloff																								; LINEINFO(ShadowModel.vsh)(80)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(81)
mov oD0, c37																								; LINEINFO(ShadowModel.vsh)(82)
mul oD0.w, r0.x, c43.z																								; LINEINFO(ShadowModel.vsh)(83)
; FreeRegister $shadowFade = r0																								; LINEINFO(macros.vsh)(224)
;	if( $shadowFade ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $shadowFade																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

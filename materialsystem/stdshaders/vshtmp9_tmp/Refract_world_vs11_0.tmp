vs.1.1																								; LINEINFO(Refract_world_vs11.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(Refract_world_vs11.vsh)(5)
; Constants specified by the app																								; LINEINFO(Refract_world_vs11.vsh)(6)
;    c0      = (0, 1, 2, 0.5)																								; LINEINFO(Refract_world_vs11.vsh)(7)
;	 c1		 = (1/2.2, 0, 0, 0)																								; LINEINFO(Refract_world_vs11.vsh)(8)
;    c2      = camera position *in world space*																								; LINEINFO(Refract_world_vs11.vsh)(9)
;    c4-c7   = modelViewProj matrix	(transpose)																								; LINEINFO(Refract_world_vs11.vsh)(10)
;    c8-c11  = ViewProj matrix (transpose)																								; LINEINFO(Refract_world_vs11.vsh)(11)
;    c12-c15 = model->view matrix (transpose)																								; LINEINFO(Refract_world_vs11.vsh)(12)
;	 c16	 = [fogStart, fogEnd, fogRange, undefined]																								; LINEINFO(Refract_world_vs11.vsh)(13)
;																								; LINEINFO(Refract_world_vs11.vsh)(14)
; Vertex components (as specified in the vertex DECL)																								; LINEINFO(Refract_world_vs11.vsh)(15)
;    v0    = Position																								; LINEINFO(Refract_world_vs11.vsh)(16)
;	 v7.xy = TexCoord0																								; LINEINFO(Refract_world_vs11.vsh)(17)
;------------------------------------------------------------------------------																								; LINEINFO(Refract_world_vs11.vsh)(18)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
dcl_tangent v11;																								; LINEINFO(macros.vsh)(70)
dcl_binormal0 v12;																								; LINEINFO(macros.vsh)(74)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
; Vertex components																								; LINEINFO(Refract_world_vs11.vsh)(22)
;    v0		= Position																								; LINEINFO(Refract_world_vs11.vsh)(23)
;	 v3		= normal																								; LINEINFO(Refract_world_vs11.vsh)(24)
;	 v7.xy	= TexCoord0																								; LINEINFO(Refract_world_vs11.vsh)(25)
;	 v11		= S axis of Texture space																								; LINEINFO(Refract_world_vs11.vsh)(26)
;	 v12	= T axis of Texture space																								; LINEINFO(Refract_world_vs11.vsh)(27)
;------------------------------------------------------------------------------																								; LINEINFO(Refract_world_vs11.vsh)(29)
; Transform the position from world to view space																								; LINEINFO(Refract_world_vs11.vsh)(30)
;------------------------------------------------------------------------------																								; LINEINFO(Refract_world_vs11.vsh)(31)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldTangentS = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldTangentT = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $projPos = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r4.x, v0, c4																								; LINEINFO(Refract_world_vs11.vsh)(39)
dp4 r4.y, v0, c5																								; LINEINFO(Refract_world_vs11.vsh)(40)
dp4 r4.z, v0, c6																								; LINEINFO(Refract_world_vs11.vsh)(41)
dp4 r4.w, v0, c7																								; LINEINFO(Refract_world_vs11.vsh)(42)
mov oPos, r4																								; LINEINFO(Refract_world_vs11.vsh)(43)
dp3 r0.x, v0, c48																								; LINEINFO(Refract_world_vs11.vsh)(45)
dp3 r0.y, v0, c49																								; LINEINFO(Refract_world_vs11.vsh)(46)
dp3 r0.z, v0, c50																								; LINEINFO(Refract_world_vs11.vsh)(47)
dp3 r1.x, v3, c48																								; LINEINFO(Refract_world_vs11.vsh)(49)
dp3 r1.y, v3, c49																								; LINEINFO(Refract_world_vs11.vsh)(50)
dp3 r1.z, v3, c50																								; LINEINFO(Refract_world_vs11.vsh)(51)
dp3 r2.x, v11, c48																								; LINEINFO(Refract_world_vs11.vsh)(53)
dp3 r2.y, v11, c49																								; LINEINFO(Refract_world_vs11.vsh)(54)
dp3 r2.z, v11, c50																								; LINEINFO(Refract_world_vs11.vsh)(55)
dp3 r3.x, v12, c48																								; LINEINFO(Refract_world_vs11.vsh)(57)
dp3 r3.y, v12, c49																								; LINEINFO(Refract_world_vs11.vsh)(58)
dp3 r3.z, v12, c50																								; LINEINFO(Refract_world_vs11.vsh)(59)
; CalcFog																								; LINEINFO(macros.vsh)(493)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $tmp = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r5, -r4.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r5, r5, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r5.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r5																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldEyeVect = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Get the eye vector in world space																								; LINEINFO(Refract_world_vs11.vsh)(65)
add r5.xyz, -r0, c2																								; LINEINFO(Refract_world_vs11.vsh)(66)
; AllocateRegister $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $bumpTexCoord = r7																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $bumpTexCoord = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; transform the eye vector to tangent space																								; LINEINFO(Refract_world_vs11.vsh)(71)
dp3 r6.x, r5, r2																								; LINEINFO(Refract_world_vs11.vsh)(72)
dp3 r6.y, r5, r3																								; LINEINFO(Refract_world_vs11.vsh)(73)
dp3 r6.z, r5, r1																								; LINEINFO(Refract_world_vs11.vsh)(74)
dp3 r6.w, r6, r6																								; LINEINFO(macros.vsh)(262)
rsq r6.w, r6.w																								; LINEINFO(macros.vsh)(263)
mul r6, r6, r6.w																								; LINEINFO(macros.vsh)(264)
; stick the tangent space eye vector into oD0																								; LINEINFO(Refract_world_vs11.vsh)(78)
mad oD0.xyz, r6, c0.w, c0.w																								; LINEINFO(Refract_world_vs11.vsh)(79)
dp4 r7.x, v7, c39																								; LINEINFO(Refract_world_vs11.vsh)(81)
dp4 r7.y, v7, c40																								; LINEINFO(Refract_world_vs11.vsh)(82)
; dudv map																								; LINEINFO(Refract_world_vs11.vsh)(84)
mov oT0.xy, r7																								; LINEINFO(Refract_world_vs11.vsh)(85)
; refract tint																								; LINEINFO(Refract_world_vs11.vsh)(87)
mov oT3.xy, r7																								; LINEINFO(Refract_world_vs11.vsh)(88)
; FreeRegister $bumpTexCoord = r7																								; LINEINFO(macros.vsh)(224)
;	if( $bumpTexCoord ne g_allocatedname[r7] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r7																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $bumpTexCoord																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $newProjPos = r7																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $w = r8																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $w = r8																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mov oPos, r4																								; LINEINFO(Refract_world_vs11.vsh)(95)
; special case perspective correct texture projection so that the texture fits exactly on the screen																								; LINEINFO(Refract_world_vs11.vsh)(97)
mul r4.y, r4.y, c42.w																								; LINEINFO(Refract_world_vs11.vsh)(98)
add r4.xy, r4.xy, r4.w																								; LINEINFO(Refract_world_vs11.vsh)(99)
mul r4.xy, r4.xy, c0.w																								; LINEINFO(Refract_world_vs11.vsh)(100)
; Do the perspective divide here. .yuck . . we aren't going to be perspective correct																								; LINEINFO(Refract_world_vs11.vsh)(102)
rcp r8.w, r4.w																								; LINEINFO(Refract_world_vs11.vsh)(103)
mul r4, r4, r8.w																								; LINEINFO(Refract_world_vs11.vsh)(104)
;------------------------------------------------------------------------------																								; LINEINFO(Refract_world_vs11.vsh)(111)
; Transform the tangentS from world to view space																								; LINEINFO(Refract_world_vs11.vsh)(112)
;------------------------------------------------------------------------------																								; LINEINFO(Refract_world_vs11.vsh)(113)
; AllocateRegister $projTangentS = r9																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $w = r8																								; LINEINFO(macros.vsh)(191)
; $projTangentS = r9																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; we only care about x and y																								; LINEINFO(Refract_world_vs11.vsh)(117)
dp3 r9.x, r2, c8																								; LINEINFO(Refract_world_vs11.vsh)(118)
dp3 r9.y, r2, c9																								; LINEINFO(Refract_world_vs11.vsh)(119)
; project tangentS																								; LINEINFO(Refract_world_vs11.vsh)(121)
mul r9.xy, r9.xy, r8.w																								; LINEINFO(Refract_world_vs11.vsh)(122)
;max r9.xy, r9.xy, c0.y																								; LINEINFO(Refract_world_vs11.vsh)(124)
;min r9.xy, r9.xy, -c0.y																								; LINEINFO(Refract_world_vs11.vsh)(125)
;------------------------------------------------------------------------------																								; LINEINFO(Refract_world_vs11.vsh)(127)
; Transform the tangentT from world to view space																								; LINEINFO(Refract_world_vs11.vsh)(128)
;------------------------------------------------------------------------------																								; LINEINFO(Refract_world_vs11.vsh)(129)
; AllocateRegister $projTangentT = r10																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $w = r8																								; LINEINFO(macros.vsh)(191)
; $projTangentS = r9																								; LINEINFO(macros.vsh)(191)
; $projTangentT = r10																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $texCoord = r11																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $w = r8																								; LINEINFO(macros.vsh)(191)
; $projTangentS = r9																								; LINEINFO(macros.vsh)(191)
; $projTangentT = r10																								; LINEINFO(macros.vsh)(191)
; $texCoord = r11																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; we only care about x and y																								; LINEINFO(Refract_world_vs11.vsh)(134)
dp3 r10.x, r3, c8																								; LINEINFO(Refract_world_vs11.vsh)(135)
dp3 r10.y, r3, c9																								; LINEINFO(Refract_world_vs11.vsh)(136)
; project tangentT																								; LINEINFO(Refract_world_vs11.vsh)(138)
mul r10.xy, r10.xy, r8.w																								; LINEINFO(Refract_world_vs11.vsh)(139)
;max r10.xy, r10.xy, c0.y																								; LINEINFO(Refract_world_vs11.vsh)(141)
;min r10.xy, r10.xy, -c0.y																								; LINEINFO(Refract_world_vs11.vsh)(142)
;max r4.xy, r4.xy, c0.y																								; LINEINFO(Refract_world_vs11.vsh)(144)
;min r4.xy, r4.xy, -c0.y																								; LINEINFO(Refract_world_vs11.vsh)(145)
mul oT1.x, r9.x, c41.x																								; LINEINFO(Refract_world_vs11.vsh)(147)
mul oT1.y, r10.x, c41.x																								; LINEINFO(Refract_world_vs11.vsh)(148)
mov oT1.z, r4.x ; huh?																								; LINEINFO(Refract_world_vs11.vsh)(149)
mul r11.x, r9.y, -c41.x																								; LINEINFO(Refract_world_vs11.vsh)(151)
mul r11.y, r10.y, -c41.x																								; LINEINFO(Refract_world_vs11.vsh)(152)
mov r11.z, r4.y																								; LINEINFO(Refract_world_vs11.vsh)(153)
mov oT2.xyz, r11																								; LINEINFO(Refract_world_vs11.vsh)(154)
mov oT3.xyz, r11																								; LINEINFO(Refract_world_vs11.vsh)(155)
; FreeRegister $texCoord = r11																								; LINEINFO(macros.vsh)(224)
;	if( $texCoord ne g_allocatedname[r11] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r11																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $texCoord																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $projPos = r4																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $w = r8																								; LINEINFO(macros.vsh)(191)
; $projTangentS = r9																								; LINEINFO(macros.vsh)(191)
; $projTangentT = r10																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r4																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $w = r8																								; LINEINFO(macros.vsh)(191)
; $projTangentS = r9																								; LINEINFO(macros.vsh)(191)
; $projTangentT = r10																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r5																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $w = r8																								; LINEINFO(macros.vsh)(191)
; $projTangentS = r9																								; LINEINFO(macros.vsh)(191)
; $projTangentT = r10																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldEyeVect = r5																								; LINEINFO(macros.vsh)(224)
;	if( $worldEyeVect ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldEyeVect																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $w = r8																								; LINEINFO(macros.vsh)(191)
; $projTangentS = r9																								; LINEINFO(macros.vsh)(191)
; $projTangentT = r10																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $tangentEyeVect = r6																								; LINEINFO(macros.vsh)(224)
;	if( $tangentEyeVect ne g_allocatedname[r6] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r6																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tangentEyeVect																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $w = r8																								; LINEINFO(macros.vsh)(191)
; $projTangentS = r9																								; LINEINFO(macros.vsh)(191)
; $projTangentT = r10																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $w = r8																								; LINEINFO(macros.vsh)(224)
;	if( $w ne g_allocatedname[r8] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r8																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $w																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $projTangentS = r9																								; LINEINFO(macros.vsh)(191)
; $projTangentT = r10																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projTangentS = r9																								; LINEINFO(macros.vsh)(224)
;	if( $projTangentS ne g_allocatedname[r9] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r9																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projTangentS																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
; $projTangentT = r10																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projTangentT = r10																								; LINEINFO(macros.vsh)(224)
;	if( $projTangentT ne g_allocatedname[r10] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r10																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projTangentT																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
; $newProjPos = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $newProjPos = r7																								; LINEINFO(macros.vsh)(224)
;	if( $newProjPos ne g_allocatedname[r7] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r7																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $newProjPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldTangentS = r2																								; LINEINFO(macros.vsh)(191)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldTangentS = r2																								; LINEINFO(macros.vsh)(224)
;	if( $worldTangentS ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldTangentS																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldTangentT = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldTangentT = r3																								; LINEINFO(macros.vsh)(224)
;	if( $worldTangentT ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldTangentT																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

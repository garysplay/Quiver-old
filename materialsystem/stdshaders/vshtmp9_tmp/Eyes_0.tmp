vs.1.1																								; LINEINFO(Eyes.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(2)
;	 c38	 = eyeball origin																											; LINEINFO(Eyes.vsh)(3)
;	 c39	 = eyeball up * 0.5																											; LINEINFO(Eyes.vsh)(4)
;	 c40	 = iris projection U																										; LINEINFO(Eyes.vsh)(5)
;	 c41	 = iris projection V																										; LINEINFO(Eyes.vsh)(6)
;	 c42	 = glint projection U																										; LINEINFO(Eyes.vsh)(7)
;	 c43	 = glint projection V																										; LINEINFO(Eyes.vsh)(8)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(9)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(18)
; Vertex blending (whacks r1-r7, positions in r7)																								; LINEINFO(Eyes.vsh)(19)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(20)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(631)
; 0 bone skinning (4 instructions)																								; LINEINFO(macros.vsh)(632)
;																								; LINEINFO(macros.vsh)(633)
; Transform position into world space																								; LINEINFO(macros.vsh)(634)
; position																								; LINEINFO(macros.vsh)(635)
dp4 r0.x, v0, c48																								; LINEINFO(macros.vsh)(636)
dp4 r0.y, v0, c49																								; LINEINFO(macros.vsh)(637)
dp4 r0.z, v0, c50																								; LINEINFO(macros.vsh)(638)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(639)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(24)
; Transform the position from world to view space																								; LINEINFO(Eyes.vsh)(25)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(26)
; AllocateRegister $projPos = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r1.x, r0, c8																								; LINEINFO(Eyes.vsh)(30)
dp4 r1.y, r0, c9																								; LINEINFO(Eyes.vsh)(31)
dp4 r1.z, r0, c10																								; LINEINFO(Eyes.vsh)(32)
dp4 r1.w, r0, c11																								; LINEINFO(Eyes.vsh)(33)
mov oPos, r1																								; LINEINFO(Eyes.vsh)(34)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(36)
; Normal is based on vertex position 																								; LINEINFO(Eyes.vsh)(37)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(38)
; AllocateRegister $worldNormal = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $normalDotUp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $normalDotUp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
sub r2, r0, c38		; Normal = (Pos - Eye origin)																								; LINEINFO(Eyes.vsh)(42)
dp3 r3, r2, c39		; Normal -= 0.5f * (Normal dot Eye Up) * Eye Up																								; LINEINFO(Eyes.vsh)(43)
mul r3, r3, c0.w																								; LINEINFO(Eyes.vsh)(44)
mad r2, -r3, c39, r2																								; LINEINFO(Eyes.vsh)(45)
; FreeRegister $normalDotUp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $normalDotUp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $normalDotUp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; normalize the normal																								; LINEINFO(Eyes.vsh)(49)
dp3 r2.w, r2, r2																								; LINEINFO(macros.vsh)(262)
rsq r2.w, r2.w																								; LINEINFO(macros.vsh)(263)
mul r2, r2, r2.w																								; LINEINFO(macros.vsh)(264)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(52)
; Lighting																								; LINEINFO(Eyes.vsh)(53)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(54)
; special case for no lighting																								; LINEINFO(macros.vsh)(1258)
; Have to write something here since debug d3d runtime will barf otherwise.																								; LINEINFO(macros.vsh)(1262)
mov oD0, c0.y																								; LINEINFO(macros.vsh)(1263)
; FreeRegister $worldNormal = r2																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(59)
; Fog																								; LINEINFO(Eyes.vsh)(60)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(61)
; CalcFog																								; LINEINFO(macros.vsh)(493)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r2, -r1.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r2, r2, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r2.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r2																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r1																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(67)
; Texture coordinates																								; LINEINFO(Eyes.vsh)(68)
; Texture 0 is the base texture																								; LINEINFO(Eyes.vsh)(69)
; Texture 1 is a planar projection used for the iris																								; LINEINFO(Eyes.vsh)(70)
; Texture 2 is a planar projection used for the glint																								; LINEINFO(Eyes.vsh)(71)
;------------------------------------------------------------------------------																								; LINEINFO(Eyes.vsh)(72)
mov oT0, v7																								; LINEINFO(Eyes.vsh)(74)
dp4 oT1.x, c40, r0																								; LINEINFO(Eyes.vsh)(75)
dp4 oT1.y, c41, r0																								; LINEINFO(Eyes.vsh)(76)
dp4 oT2.x, c42, r0																								; LINEINFO(Eyes.vsh)(77)
dp4 oT2.y, c43, r0																								; LINEINFO(Eyes.vsh)(78)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

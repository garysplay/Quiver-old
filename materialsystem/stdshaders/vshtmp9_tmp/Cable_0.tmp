vs.1.1																								; LINEINFO(Cable.vsh)(1)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_color0 v5;																								; LINEINFO(macros.vsh)(46)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
dcl_texcoord1 v8;																								; LINEINFO(macros.vsh)(58)
dcl_tangent v11;																								; LINEINFO(macros.vsh)(70)
dcl_binormal0 v12;																								; LINEINFO(macros.vsh)(74)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(7)
; The cable equation is:																								; LINEINFO(Cable.vsh)(8)
; [L dot N] * C * T																								; LINEINFO(Cable.vsh)(9)
;																								; LINEINFO(Cable.vsh)(10)
; where:																								; LINEINFO(Cable.vsh)(11)
; C = directional light color																								; LINEINFO(Cable.vsh)(12)
; T = baseTexture																								; LINEINFO(Cable.vsh)(13)
; N = particle normal (stored in the normal map)																								; LINEINFO(Cable.vsh)(14)
; L = directional light direction																								; LINEINFO(Cable.vsh)(15)
;																								; LINEINFO(Cable.vsh)(16)
;	c38		= Directional light direction																								; LINEINFO(Cable.vsh)(17)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(18)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(21)
; Transform position from object to projection space																								; LINEINFO(Cable.vsh)(22)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(23)
; AllocateRegister $projPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4		r0.x, v0, c4																								; LINEINFO(Cable.vsh)(27)
dp4		r0.y, v0, c5																								; LINEINFO(Cable.vsh)(28)
dp4		r0.z, v0, c6																								; LINEINFO(Cable.vsh)(29)
dp4		r0.w, v0, c7																								; LINEINFO(Cable.vsh)(30)
mov		oPos, r0																								; LINEINFO(Cable.vsh)(32)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(35)
; Fog																								; LINEINFO(Cable.vsh)(36)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(37)
; AllocateRegister $worldPos = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; CalcFog																								; LINEINFO(macros.vsh)(493)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r2, -r0.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r2, r2, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r2.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r2																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(50)
; Setup the tangent space																								; LINEINFO(Cable.vsh)(51)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(52)
; AllocateRegister $tmp1 = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $tmp1 = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $tmp2 = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $tmp1 = r0																								; LINEINFO(macros.vsh)(191)
; $tmp2 = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $tmp3 = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $tmp1 = r0																								; LINEINFO(macros.vsh)(191)
; $tmp2 = r1																								; LINEINFO(macros.vsh)(191)
; $tmp3 = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $r = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $tmp1 = r0																								; LINEINFO(macros.vsh)(191)
; $tmp2 = r1																								; LINEINFO(macros.vsh)(191)
; $tmp3 = r2																								; LINEINFO(macros.vsh)(191)
; $r = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Get S crossed with T (call it R)																								; LINEINFO(Cable.vsh)(59)
mov		r0, v11																								; LINEINFO(Cable.vsh)(60)
mov		r1, v12																								; LINEINFO(Cable.vsh)(61)
mul		r2, v11.yzxw,  r1.zxyw																								; LINEINFO(Cable.vsh)(63)
mad		r3, -v11.zxyw, r1.yzxw, r2																								; LINEINFO(Cable.vsh)(64)
; FreeRegister $tmp2 = r1																								; LINEINFO(macros.vsh)(224)
;	if( $tmp2 ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp2																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $tmp1 = r0																								; LINEINFO(macros.vsh)(191)
; $tmp3 = r2																								; LINEINFO(macros.vsh)(191)
; $r = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $tmp3 = r2																								; LINEINFO(macros.vsh)(224)
;	if( $tmp3 ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp3																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $tmp1 = r0																								; LINEINFO(macros.vsh)(191)
; $r = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $s = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $tmp1 = r0																								; LINEINFO(macros.vsh)(191)
; $s = r1																								; LINEINFO(macros.vsh)(191)
; $r = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Normalize S (into r1)																								; LINEINFO(Cable.vsh)(71)
dp3		r1.w, v11, v11																								; LINEINFO(Cable.vsh)(72)
rsq		r1.w, r1.w																								; LINEINFO(Cable.vsh)(73)
mul		r1.xyz, v11, r1.w																								; LINEINFO(Cable.vsh)(74)
; Normalize R (into r3)																								; LINEINFO(Cable.vsh)(76)
dp3		r3.w, r3, r3																								; LINEINFO(Cable.vsh)(77)
rsq		r3.w, r3.w																								; LINEINFO(Cable.vsh)(78)
mul		r3.xyz, r3, r3.w																								; LINEINFO(Cable.vsh)(79)
; AllocateRegister $t = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $tmp1 = r0																								; LINEINFO(macros.vsh)(191)
; $s = r1																								; LINEINFO(macros.vsh)(191)
; $t = r2																								; LINEINFO(macros.vsh)(191)
; $r = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Regenerate T (into r2)																								; LINEINFO(Cable.vsh)(83)
mul		r2, r3.yzxw,  r0.zxyw																								; LINEINFO(Cable.vsh)(84)
mad		r2, -r3.zxyw, r0.yzxw, r2																								; LINEINFO(Cable.vsh)(85)
; FreeRegister $tmp1 = r0																								; LINEINFO(macros.vsh)(224)
;	if( $tmp1 ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp1																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $s = r1																								; LINEINFO(macros.vsh)(191)
; $t = r2																								; LINEINFO(macros.vsh)(191)
; $r = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(89)
; Transform the light direction (into oD1)																								; LINEINFO(Cable.vsh)(90)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(91)
; AllocateRegister $lightDirection = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $lightDirection = r0																								; LINEINFO(macros.vsh)(191)
; $s = r1																								; LINEINFO(macros.vsh)(191)
; $t = r2																								; LINEINFO(macros.vsh)(191)
; $r = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp3		r0.x, r1, c38																								; LINEINFO(Cable.vsh)(95)
dp3		r0.y, r2, c38																								; LINEINFO(Cable.vsh)(96)
dp3		r0.z, r3, c38																								; LINEINFO(Cable.vsh)(97)
; FreeRegister $r = r3																								; LINEINFO(macros.vsh)(224)
;	if( $r ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $r																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $lightDirection = r0																								; LINEINFO(macros.vsh)(191)
; $s = r1																								; LINEINFO(macros.vsh)(191)
; $t = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $s = r1																								; LINEINFO(macros.vsh)(224)
;	if( $s ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $s																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $lightDirection = r0																								; LINEINFO(macros.vsh)(191)
; $t = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $t = r2																								; LINEINFO(macros.vsh)(224)
;	if( $t ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $t																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $lightDirection = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Scale into 0-1 range (we're assuming light direction was normalized prior to here)																								; LINEINFO(Cable.vsh)(103)
add		oT2, r0, c0.w	; + 0.5 																								; LINEINFO(Cable.vsh)(104)
; FreeRegister $lightDirection = r0																								; LINEINFO(macros.vsh)(224)
;	if( $lightDirection ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $lightDirection																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(107)
; Copy texcoords for the normal map and base texture																								; LINEINFO(Cable.vsh)(108)
;------------------------------------------------------------------------------																								; LINEINFO(Cable.vsh)(109)
mov		oT0, v7																								; LINEINFO(Cable.vsh)(111)
mov		oT1, v8																								; LINEINFO(Cable.vsh)(112)
; Pass the dirlight color through																								; LINEINFO(Cable.vsh)(114)
mov		oD0.xyzw, v5																								; LINEINFO(Cable.vsh)(115)

vs.1.1																								; LINEINFO(UnlitTwoTexture.vsh)(1)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_blendweight v1;																								; LINEINFO(macros.vsh)(34)
dcl_blendindices v2;																								; LINEINFO(macros.vsh)(38)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(unlittwotexture_inc.vsh)(10)
; Vertex blending																								; LINEINFO(unlittwotexture_inc.vsh)(11)
;------------------------------------------------------------------------------																								; LINEINFO(unlittwotexture_inc.vsh)(12)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(643)
; 3 bone skinning  (19 instructions)																								; LINEINFO(macros.vsh)(644)
;																								; LINEINFO(macros.vsh)(645)
; AllocateRegister $boneIndices = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position into world space using all bones																								; LINEINFO(macros.vsh)(656)
; denormalize d3dcolor to matrix index																								; LINEINFO(macros.vsh)(657)
mad r1, v2, c3.z, c3.w																								; LINEINFO(macros.vsh)(658)
; r11 = boneindices at this point																								; LINEINFO(macros.vsh)(664)
; first matrix																								; LINEINFO(macros.vsh)(665)
mov a0.x, r1.z																								; LINEINFO(macros.vsh)(666)
mul r2, v1.x, c[a0.x]																								; LINEINFO(macros.vsh)(667)
mul r3, v1.x, c[a0.x+1]																								; LINEINFO(macros.vsh)(668)
mul r4, v1.x, c[a0.x+2]																								; LINEINFO(macros.vsh)(669)
; second matrix																								; LINEINFO(macros.vsh)(670)
mov a0.x, r1.y																								; LINEINFO(macros.vsh)(671)
mad r2, v1.y, c[a0.x], r2																								; LINEINFO(macros.vsh)(672)
mad r3, v1.y, c[a0.x+1], r3																								; LINEINFO(macros.vsh)(673)
mad r4, v1.y, c[a0.x+2], r4																								; LINEINFO(macros.vsh)(674)
; Calculate third weight																								; LINEINFO(macros.vsh)(676)
; compute 1-(weight1+weight2) to calculate weight2																								; LINEINFO(macros.vsh)(677)
; Use r1.w as a temp since we aren't using it for anything.																								; LINEINFO(macros.vsh)(678)
add r1.w, v1.x, v1.y																								; LINEINFO(macros.vsh)(679)
sub r1.w, c0.y, r1.w																								; LINEINFO(macros.vsh)(680)
; third matrix																								; LINEINFO(macros.vsh)(682)
mov a0.x, r1.x																								; LINEINFO(macros.vsh)(683)
mad r2, r1.w, c[a0.x], r2																								; LINEINFO(macros.vsh)(684)
mad r3, r1.w, c[a0.x+1], r3																								; LINEINFO(macros.vsh)(685)
mad r4, r1.w, c[a0.x+2], r4																								; LINEINFO(macros.vsh)(686)
dp4 r0.x, v0, r2																								; LINEINFO(macros.vsh)(688)
dp4 r0.y, v0, r3																								; LINEINFO(macros.vsh)(689)
dp4 r0.z, v0, r4																								; LINEINFO(macros.vsh)(690)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(691)
; FreeRegister $boneIndices = r1																								; LINEINFO(macros.vsh)(224)
;	if( $boneIndices ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $boneIndices																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix0 = r2																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix0 ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix0																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix1 = r3																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix1 ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix1																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix2 = r4																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix2 ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix2																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(unlittwotexture_inc.vsh)(16)
; Transform the position from world to proj space																								; LINEINFO(unlittwotexture_inc.vsh)(17)
;------------------------------------------------------------------------------																								; LINEINFO(unlittwotexture_inc.vsh)(18)
; AllocateRegister $projPos = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r1.x, r0, c8																								; LINEINFO(unlittwotexture_inc.vsh)(21)
dp4 r1.y, r0, c9																								; LINEINFO(unlittwotexture_inc.vsh)(22)
dp4 r1.z, r0, c10																								; LINEINFO(unlittwotexture_inc.vsh)(23)
dp4 r1.w, r0, c11																								; LINEINFO(unlittwotexture_inc.vsh)(24)
mov oPos, r1																								; LINEINFO(unlittwotexture_inc.vsh)(25)
;------------------------------------------------------------------------------																								; LINEINFO(unlittwotexture_inc.vsh)(27)
; Fog																								; LINEINFO(unlittwotexture_inc.vsh)(28)
;------------------------------------------------------------------------------																								; LINEINFO(unlittwotexture_inc.vsh)(29)
; CalcFog																								; LINEINFO(macros.vsh)(493)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r2, -r1.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r2, r2, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r2.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r2																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r1																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(unlittwotexture_inc.vsh)(34)
; Texture coordinates (use world-space normal for envmap, tex transform for mask)																								; LINEINFO(unlittwotexture_inc.vsh)(35)
;------------------------------------------------------------------------------																								; LINEINFO(unlittwotexture_inc.vsh)(36)
dp4 oT0.x, v7, c38																								; LINEINFO(unlittwotexture_inc.vsh)(38)
dp4 oT0.y, v7, c39																								; LINEINFO(unlittwotexture_inc.vsh)(39)
dp4 oT1.x, v7, c40																								; LINEINFO(unlittwotexture_inc.vsh)(46)
dp4 oT1.y, v7, c41																								; LINEINFO(unlittwotexture_inc.vsh)(47)
; Modulation color																								; LINEINFO(unlittwotexture_inc.vsh)(61)
mov oD0, c37																								; LINEINFO(unlittwotexture_inc.vsh)(62)

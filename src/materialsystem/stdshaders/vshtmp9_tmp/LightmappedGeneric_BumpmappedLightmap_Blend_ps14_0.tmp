vs.1.1																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(1)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
dcl_texcoord1 v8;																								; LINEINFO(macros.vsh)(58)
dcl_texcoord2 v9;																								; LINEINFO(macros.vsh)(62)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(7)
; Vertex blending																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(8)
;------------------------------------------------------------------------------																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(9)
; AllocateRegister $projPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position from object to projection space																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(13)
dp4 r0.x, v0, c4																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(14)
dp4 r0.y, v0, c5																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(15)
dp4 r0.z, v0, c6																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(16)
dp4 r0.w, v0, c7																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(17)
mov oPos, r0																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(19)
;------------------------------------------------------------------------------																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(21)
; Fog																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(22)
;------------------------------------------------------------------------------																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(23)
; AllocateRegister $worldPos = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; CalcFog																								; LINEINFO(macros.vsh)(493)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r2, -r0.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r2, r2, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r2.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r2																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(36)
; Texture coordinates																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(37)
;------------------------------------------------------------------------------																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(38)
; Compute the texture coordinates given the offset between																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(40)
; each bumped lightmap																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(41)
; AllocateRegister $offset = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $offset = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mov r0.xy, v9																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(43)
dp4 oT0.x, v7, c38																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(44)
dp4 oT0.y, v7, c39																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(45)
add oT1.xy, r0, v8																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(46)
mad oT2.xy, r0, c0.z, v8																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(47)
; AllocateRegister $three = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $offset = r0																								; LINEINFO(macros.vsh)(191)
; $three = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
add r1, c0.y, c0.z																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(49)
mad oT3.xy, r0, r1, v8																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(50)
; FreeRegister $three = r1																								; LINEINFO(macros.vsh)(224)
;	if( $three ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $three																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $offset = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 oT4.x, v7, c40																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(52)
dp4 oT4.y, v7, c41																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(53)
dp4 oT5.x, v7, c42																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(54)
dp4 oT5.y, v7, c43																								; LINEINFO(LightmappedGeneric_BumpmappedLightmap_Blend_ps14.vsh)(55)
; FreeRegister $offset = r0																								; LINEINFO(macros.vsh)(224)
;	if( $offset ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $offset																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

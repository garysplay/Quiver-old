vs.1.1																								; LINEINFO(Water_ps14.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(Water_ps14.vsh)(5)
; Constants specified by the app																								; LINEINFO(Water_ps14.vsh)(6)
;    c0      = (0, 1, 2, 0.5)																								; LINEINFO(Water_ps14.vsh)(7)
;	 c1		 = (1/2.2, 0, 0, 0)																								; LINEINFO(Water_ps14.vsh)(8)
;    c2      = camera position *in world space*																								; LINEINFO(Water_ps14.vsh)(9)
;    c4-c7   = modelViewProj matrix	(transpose)																								; LINEINFO(Water_ps14.vsh)(10)
;    c8-c11  = ViewProj matrix (transpose)																								; LINEINFO(Water_ps14.vsh)(11)
;    c12-c15 = model->view matrix (transpose)																								; LINEINFO(Water_ps14.vsh)(12)
;	 c16	 = [fogStart, fogEnd, fogRange, undefined]																								; LINEINFO(Water_ps14.vsh)(13)
;																								; LINEINFO(Water_ps14.vsh)(14)
; c38..c41 - special proj matrix																								; LINEINFO(Water_ps14.vsh)(15)
;																								; LINEINFO(Water_ps14.vsh)(16)
; Vertex components (as specified in the vertex DECL)																								; LINEINFO(Water_ps14.vsh)(17)
;    v0    = Position																								; LINEINFO(Water_ps14.vsh)(18)
;	 v7.xy = TexCoord0																								; LINEINFO(Water_ps14.vsh)(19)
;------------------------------------------------------------------------------																								; LINEINFO(Water_ps14.vsh)(20)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
dcl_tangent v11;																								; LINEINFO(macros.vsh)(70)
dcl_binormal0 v12;																								; LINEINFO(macros.vsh)(74)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
; Vertex components																								; LINEINFO(Water_ps14.vsh)(24)
;    v0		= Position																								; LINEINFO(Water_ps14.vsh)(25)
;	 v3		= normal																								; LINEINFO(Water_ps14.vsh)(26)
;	 v7.xy	= TexCoord0																								; LINEINFO(Water_ps14.vsh)(27)
;	 v11		= S axis of Texture space																								; LINEINFO(Water_ps14.vsh)(28)
;	 v12	= T axis of Texture space																								; LINEINFO(Water_ps14.vsh)(29)
;------------------------------------------------------------------------------																								; LINEINFO(Water_ps14.vsh)(32)
; Transform the position from world to view space																								; LINEINFO(Water_ps14.vsh)(33)
;------------------------------------------------------------------------------																								; LINEINFO(Water_ps14.vsh)(34)
; AllocateRegister $projPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position from object to projection space																								; LINEINFO(Water_ps14.vsh)(39)
dp4 r0.x, v0, c4																								; LINEINFO(Water_ps14.vsh)(40)
dp4 r0.y, v0, c5																								; LINEINFO(Water_ps14.vsh)(41)
dp4 r0.z, v0, c6																								; LINEINFO(Water_ps14.vsh)(42)
dp4 r0.w, v0, c7																								; LINEINFO(Water_ps14.vsh)(43)
mov oPos, r0																								; LINEINFO(Water_ps14.vsh)(44)
; AllocateRegister $worldPos = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position from object to world space																								; LINEINFO(Water_ps14.vsh)(48)
dp4 r1.x, v0, c48																								; LINEINFO(Water_ps14.vsh)(49)
dp4 r1.y, v0, c49																								; LINEINFO(Water_ps14.vsh)(50)
dp4 r1.z, v0, c50																								; LINEINFO(Water_ps14.vsh)(51)
; CalcFog																								; LINEINFO(macros.vsh)(493)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(413)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(414)
; only r1.z is used out of worldPos																								; LINEINFO(macros.vsh)(416)
; AllocateRegister $tmp = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; This is simple similar triangles. Imagine a line passing from the point directly vertically																								; LINEINFO(macros.vsh)(429)
; and another line passing from the point to the eye position.																								; LINEINFO(macros.vsh)(430)
; Let d = total distance from point to the eye																								; LINEINFO(macros.vsh)(431)
; Let h = vertical distance from the point to the eye																								; LINEINFO(macros.vsh)(432)
; Let hw = vertical distance from the point to the water surface																								; LINEINFO(macros.vsh)(433)
; Let dw = distance from the point to a point on the water surface that lies along the ray from point to eye																								; LINEINFO(macros.vsh)(434)
; Therefore d/h = dw/hw by similar triangles, or dw = d * hw / h.																								; LINEINFO(macros.vsh)(435)
; d = projPos.w, h = eyepos.z - worldPos.z, hw = waterheight.z - worldPos.z, dw = what we solve for																								; LINEINFO(macros.vsh)(436)
; Now, tmp.x = hw, and tmp.y = h																								; LINEINFO(macros.vsh)(438)
add r2.xy, c2.wz, -r1.z																								; LINEINFO(macros.vsh)(439)
; if r2.x < 0, then set it to 0																								; LINEINFO(macros.vsh)(441)
; This is the equivalent of moving the vert to the water surface if it's above the water surface																								; LINEINFO(macros.vsh)(442)
max r2.x, r2.x, c0.x																								; LINEINFO(macros.vsh)(443)
; Now we have 1/h																								; LINEINFO(macros.vsh)(445)
rcp r2.z, r2.y																								; LINEINFO(macros.vsh)(446)
; Now we have d/h																								; LINEINFO(macros.vsh)(448)
mul r2.w, r0.w, r2.z																								; LINEINFO(macros.vsh)(449)
; We finally have d * hw / h																								; LINEINFO(macros.vsh)(451)
; r2.w is now the distance that we see through water.																								; LINEINFO(macros.vsh)(452)
mul r2.w, r2.x, r2.w																								; LINEINFO(macros.vsh)(453)
mad r2, -r2.w, c16.w, c16.y																								; LINEINFO(macros.vsh)(457)
min r2, r2, c0.y																								; LINEINFO(macros.vsh)(458)
max oFog, r2.x, c0.x																								; LINEINFO(macros.vsh)(459)
; FreeRegister $tmp = r2																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldEyeVect = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Get the eye vector in world space																								; LINEINFO(Water_ps14.vsh)(57)
add r2.xyz, -r1, c2																								; LINEINFO(Water_ps14.vsh)(58)
; AllocateRegister $tangentEyeVect = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r2																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; transform the eye vector to tangent space																								; LINEINFO(Water_ps14.vsh)(62)
dp3 r3.x, r2, v11																								; LINEINFO(Water_ps14.vsh)(63)
dp3 r3.y, r2, v12																								; LINEINFO(Water_ps14.vsh)(64)
dp3 r3.z, r2, v3																								; LINEINFO(Water_ps14.vsh)(65)
mov r3.w, c0.x																								; LINEINFO(Water_ps14.vsh)(66)
mov oT5, r3																								; LINEINFO(Water_ps14.vsh)(68)
; base coordinates																								; LINEINFO(Water_ps14.vsh)(70)
dp4 oT0.x, v7, c39																								; LINEINFO(Water_ps14.vsh)(71)
dp4 oT0.y, v7, c40																								; LINEINFO(Water_ps14.vsh)(72)
; reflection																								; LINEINFO(Water_ps14.vsh)(74)
; AllocateRegister $projPosReflect = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldEyeVect = r2																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r3																								; LINEINFO(macros.vsh)(191)
; $projPosReflect = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mov r4, r0																								; LINEINFO(Water_ps14.vsh)(77)
add r4.xy, r4, r4.w																								; LINEINFO(Water_ps14.vsh)(78)
mul r4.xy, r4, c0.w																								; LINEINFO(Water_ps14.vsh)(79)
mov oT1, r4																								; LINEINFO(Water_ps14.vsh)(80)
; refraction																								; LINEINFO(Water_ps14.vsh)(82)
mov r0.y, -r0.y																								; LINEINFO(Water_ps14.vsh)(83)
add r0.xy, r0, r0.w																								; LINEINFO(Water_ps14.vsh)(84)
mul r0.xy, r0, c0.w																								; LINEINFO(Water_ps14.vsh)(85)
mov oT2, r0																								; LINEINFO(Water_ps14.vsh)(86)
; reflectionscale, refractionscale																								; LINEINFO(Water_ps14.vsh)(88)
mov oT4, c42																								; LINEINFO(Water_ps14.vsh)(89)
; FreeRegister $worldEyeVect = r2																								; LINEINFO(macros.vsh)(224)
;	if( $worldEyeVect ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldEyeVect																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
; $tangentEyeVect = r3																								; LINEINFO(macros.vsh)(191)
; $projPosReflect = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $tangentEyeVect = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tangentEyeVect ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tangentEyeVect																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
; $projPosReflect = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPosReflect = r4																								; LINEINFO(macros.vsh)(224)
;	if( $projPosReflect ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPosReflect																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

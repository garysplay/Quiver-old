vs.1.1																								; LINEINFO(ShadowModel.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(6)
; Constants specified by the app																								; LINEINFO(ShadowModel.vsh)(7)
;	 c38-c40 = Shadow texture matrix																								; LINEINFO(ShadowModel.vsh)(8)
;	 c41	 = Tex origin																								; LINEINFO(ShadowModel.vsh)(9)
;	 c42	 = Tex Scale																								; LINEINFO(ShadowModel.vsh)(10)
;	 c43	 = [Shadow falloff offset, 1/Shadow distance, Shadow scale, 0 ]																								; LINEINFO(ShadowModel.vsh)(11)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(12)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_blendweight v1;																								; LINEINFO(macros.vsh)(34)
dcl_blendindices v2;																								; LINEINFO(macros.vsh)(38)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(16)
; Vertex blending (whacks r1-r7, positions in r7, normals in r8)																								; LINEINFO(ShadowModel.vsh)(17)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(18)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $boneIndices = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position into world space using all bones																								; LINEINFO(macros.vsh)(743)
; denormalize d3dcolor to matrix index																								; LINEINFO(macros.vsh)(744)
mad r2, v2, c3.z, c3.w																								; LINEINFO(macros.vsh)(745)
; r11 = boneindices at this point																								; LINEINFO(macros.vsh)(751)
; first matrix																								; LINEINFO(macros.vsh)(752)
mov a0.x, r2.z																								; LINEINFO(macros.vsh)(753)
mul r3, v1.x, c[a0.x]																								; LINEINFO(macros.vsh)(754)
mul r4, v1.x, c[a0.x+1]																								; LINEINFO(macros.vsh)(755)
mul r5, v1.x, c[a0.x+2]																								; LINEINFO(macros.vsh)(756)
; second matrix																								; LINEINFO(macros.vsh)(757)
mov a0.x, r2.y																								; LINEINFO(macros.vsh)(758)
mad r3, v1.y, c[a0.x], r3																								; LINEINFO(macros.vsh)(759)
mad r4, v1.y, c[a0.x+1], r4																								; LINEINFO(macros.vsh)(760)
mad r5, v1.y, c[a0.x+2], r5																								; LINEINFO(macros.vsh)(761)
; Calculate third weight																								; LINEINFO(macros.vsh)(763)
; compute 1-(weight1+weight2) to calculate weight2																								; LINEINFO(macros.vsh)(764)
; Use r2.w as a temp since we aren't using it for anything.																								; LINEINFO(macros.vsh)(765)
add r2.w, v1.x, v1.y																								; LINEINFO(macros.vsh)(766)
sub r2.w, c0.y, r2.w																								; LINEINFO(macros.vsh)(767)
; third matrix																								; LINEINFO(macros.vsh)(769)
mov a0.x, r2.x																								; LINEINFO(macros.vsh)(770)
mad r3, r2.w, c[a0.x], r3																								; LINEINFO(macros.vsh)(771)
mad r4, r2.w, c[a0.x+1], r4																								; LINEINFO(macros.vsh)(772)
mad r5, r2.w, c[a0.x+2], r5																								; LINEINFO(macros.vsh)(773)
dp4 r0.x, v0, r3																								; LINEINFO(macros.vsh)(775)
dp4 r0.y, v0, r4																								; LINEINFO(macros.vsh)(776)
dp4 r0.z, v0, r5																								; LINEINFO(macros.vsh)(777)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(778)
; normal																								; LINEINFO(macros.vsh)(780)
dp3 r1.x, v3, r3																								; LINEINFO(macros.vsh)(781)
dp3 r1.y, v3, r4																								; LINEINFO(macros.vsh)(782)
dp3 r1.z, v3, r5																								; LINEINFO(macros.vsh)(783)
; FreeRegister $boneIndices = r2																								; LINEINFO(macros.vsh)(224)
;	if( $boneIndices ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $boneIndices																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix0 ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix0																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix1 ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix1																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix2 ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix2																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform the position from world to view space																								; LINEINFO(ShadowModel.vsh)(23)
; AllocateRegister $projPos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r2.x, r0, c8																								; LINEINFO(ShadowModel.vsh)(26)
dp4 r2.y, r0, c9																								; LINEINFO(ShadowModel.vsh)(27)
dp4 r2.z, r0, c10																								; LINEINFO(ShadowModel.vsh)(28)
dp4 r2.w, r0, c11																								; LINEINFO(ShadowModel.vsh)(29)
mov oPos, r2																								; LINEINFO(ShadowModel.vsh)(30)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(32)
; Fog																								; LINEINFO(ShadowModel.vsh)(33)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(34)
; CalcFog																								; LINEINFO(macros.vsh)(493)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(413)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(414)
; only r0.z is used out of worldPos																								; LINEINFO(macros.vsh)(416)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; This is simple similar triangles. Imagine a line passing from the point directly vertically																								; LINEINFO(macros.vsh)(429)
; and another line passing from the point to the eye position.																								; LINEINFO(macros.vsh)(430)
; Let d = total distance from point to the eye																								; LINEINFO(macros.vsh)(431)
; Let h = vertical distance from the point to the eye																								; LINEINFO(macros.vsh)(432)
; Let hw = vertical distance from the point to the water surface																								; LINEINFO(macros.vsh)(433)
; Let dw = distance from the point to a point on the water surface that lies along the ray from point to eye																								; LINEINFO(macros.vsh)(434)
; Therefore d/h = dw/hw by similar triangles, or dw = d * hw / h.																								; LINEINFO(macros.vsh)(435)
; d = projPos.w, h = eyepos.z - worldPos.z, hw = waterheight.z - worldPos.z, dw = what we solve for																								; LINEINFO(macros.vsh)(436)
; Now, tmp.x = hw, and tmp.y = h																								; LINEINFO(macros.vsh)(438)
add r3.xy, c2.wz, -r0.z																								; LINEINFO(macros.vsh)(439)
; if r3.x < 0, then set it to 0																								; LINEINFO(macros.vsh)(441)
; This is the equivalent of moving the vert to the water surface if it's above the water surface																								; LINEINFO(macros.vsh)(442)
max r3.x, r3.x, c0.x																								; LINEINFO(macros.vsh)(443)
; Now we have 1/h																								; LINEINFO(macros.vsh)(445)
rcp r3.z, r3.y																								; LINEINFO(macros.vsh)(446)
; Now we have d/h																								; LINEINFO(macros.vsh)(448)
mul r3.w, r2.w, r3.z																								; LINEINFO(macros.vsh)(449)
; We finally have d * hw / h																								; LINEINFO(macros.vsh)(451)
; r3.w is now the distance that we see through water.																								; LINEINFO(macros.vsh)(452)
mul r3.w, r3.x, r3.w																								; LINEINFO(macros.vsh)(453)
mad r3, -r3.w, c16.w, c16.y																								; LINEINFO(macros.vsh)(457)
min r3, r3, c0.y																								; LINEINFO(macros.vsh)(458)
max oFog, r3.x, c0.x																								; LINEINFO(macros.vsh)(459)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(38)
; Transform position into texture space (from 0 to 1)																								; LINEINFO(ShadowModel.vsh)(39)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(40)
; AllocateRegister $texturePos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r2.x, r0, c38																								; LINEINFO(ShadowModel.vsh)(42)
dp4 r2.y, r0, c39																								; LINEINFO(ShadowModel.vsh)(43)
dp4 r2.z, r0, c40																								; LINEINFO(ShadowModel.vsh)(44)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(47)
; Figure out the shadow fade amount																								; LINEINFO(ShadowModel.vsh)(48)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(49)
; AllocateRegister $shadowFade = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
sub r0, r2.z, c43.x																								; LINEINFO(ShadowModel.vsh)(51)
mul r0, r0, c43.y																								; LINEINFO(ShadowModel.vsh)(52)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(54)
; Offset it into the texture																								; LINEINFO(ShadowModel.vsh)(55)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(56)
; AllocateRegister $actualTextureCoord = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
; $actualTextureCoord = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r3.xyz, c42, r2																								; LINEINFO(ShadowModel.vsh)(58)
add oT0.xyz, r3, c41																								; LINEINFO(ShadowModel.vsh)(59)
;mov oT0.xyz, r2																								; LINEINFO(ShadowModel.vsh)(60)
; FreeRegister $actualTextureCoord = r3																								; LINEINFO(macros.vsh)(224)
;	if( $actualTextureCoord ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $actualTextureCoord																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $texturePos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(63)
; We're doing clipping by using texkill																								; LINEINFO(ShadowModel.vsh)(64)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(65)
mov oT1.xyz, r2		; also clips when shadow z < 0 !																								; LINEINFO(ShadowModel.vsh)(66)
sub oT2.xyz, c0.y, r2																								; LINEINFO(ShadowModel.vsh)(67)
sub oT2.z, c0.y, r0.z	; clips when shadow z > shadow distance																									; LINEINFO(ShadowModel.vsh)(68)
; FreeRegister $texturePos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $texturePos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $texturePos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(71)
; We're doing backface culling by using texkill also (wow yucky)																								; LINEINFO(ShadowModel.vsh)(72)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(73)
; Transform z component of normal in texture space																								; LINEINFO(ShadowModel.vsh)(74)
; If it's negative, then don't draw the pixel																								; LINEINFO(ShadowModel.vsh)(75)
dp3 oT3, r1, -c40																								; LINEINFO(ShadowModel.vsh)(76)
; FreeRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $shadowFade = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(79)
; Shadow color, falloff																								; LINEINFO(ShadowModel.vsh)(80)
;------------------------------------------------------------------------------																								; LINEINFO(ShadowModel.vsh)(81)
mov oD0, c37																								; LINEINFO(ShadowModel.vsh)(82)
mul oD0.w, r0.x, c43.z																								; LINEINFO(ShadowModel.vsh)(83)
; FreeRegister $shadowFade = r0																								; LINEINFO(macros.vsh)(224)
;	if( $shadowFade ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $shadowFade																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

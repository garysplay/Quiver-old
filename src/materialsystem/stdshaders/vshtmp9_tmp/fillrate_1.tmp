vs.1.1																								; LINEINFO(fillrate.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(fillrate.vsh)(6)
; Constants specified by the app																								; LINEINFO(fillrate.vsh)(7)
;    c0      = (0, 1, 2, 0.5)																								; LINEINFO(fillrate.vsh)(8)
;	 c1		 = (1/2.2, 3, 255, overbright factor)																								; LINEINFO(fillrate.vsh)(9)
;    c2      = camera position *in world space*																								; LINEINFO(fillrate.vsh)(10)
;    c4-c7   = modelViewProj matrix	(transpose)																								; LINEINFO(fillrate.vsh)(11)
;    c8-c11  = ViewProj matrix (transpose)																								; LINEINFO(fillrate.vsh)(12)
;    c12-c15 = model->view matrix (transpose)																								; LINEINFO(fillrate.vsh)(13)
;	 c16	 = [fogStart, fogEnd, fogRange, 1.0/fogRange]																								; LINEINFO(fillrate.vsh)(14)
;	 c38-c39 = Base texture transform																								; LINEINFO(fillrate.vsh)(15)
;    c40-c41 = Mask texture transform																								; LINEINFO(fillrate.vsh)(16)
;------------------------------------------------------------------------------																								; LINEINFO(fillrate.vsh)(17)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(fillrate.vsh)(21)
; Vertex blending																								; LINEINFO(fillrate.vsh)(22)
;------------------------------------------------------------------------------																								; LINEINFO(fillrate.vsh)(23)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(631)
; 0 bone skinning (4 instructions)																								; LINEINFO(macros.vsh)(632)
;																								; LINEINFO(macros.vsh)(633)
; Transform position into world space																								; LINEINFO(macros.vsh)(634)
; position																								; LINEINFO(macros.vsh)(635)
dp4 r0.x, v0, c48																								; LINEINFO(macros.vsh)(636)
dp4 r0.y, v0, c49																								; LINEINFO(macros.vsh)(637)
dp4 r0.z, v0, c50																								; LINEINFO(macros.vsh)(638)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(639)
; Transform the position from world to view space																								; LINEINFO(fillrate.vsh)(28)
dp4 oPos.x, r0, c8																								; LINEINFO(fillrate.vsh)(29)
dp4 oPos.y, r0, c9																								; LINEINFO(fillrate.vsh)(30)
dp4 oPos.z, r0, c10																								; LINEINFO(fillrate.vsh)(31)
dp4 oPos.w, r0, c11																								; LINEINFO(fillrate.vsh)(32)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

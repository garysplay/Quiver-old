vs.1.1																								; LINEINFO(overlay_fit_vs11.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(overlay_fit_vs11.vsh)(5)
; Constants specified by the app																								; LINEINFO(overlay_fit_vs11.vsh)(6)
;    c0      = (0, 1, 2, 0.5)																								; LINEINFO(overlay_fit_vs11.vsh)(7)
;	 c1		 = (1/2.2, 0, 0, 0)																								; LINEINFO(overlay_fit_vs11.vsh)(8)
;    c2      = camera position *in world space*																								; LINEINFO(overlay_fit_vs11.vsh)(9)
;    c4-c7   = modelViewProj matrix	(transpose)																								; LINEINFO(overlay_fit_vs11.vsh)(10)
;    c8-c11  = ViewProj matrix (transpose)																								; LINEINFO(overlay_fit_vs11.vsh)(11)
;    c12-c15 = model->view matrix (transpose)																								; LINEINFO(overlay_fit_vs11.vsh)(12)
;	 c16	 = [fogStart, fogEnd, fogRange, undefined]																								; LINEINFO(overlay_fit_vs11.vsh)(13)
;																								; LINEINFO(overlay_fit_vs11.vsh)(14)
; Vertex components (as specified in the vertex DECL)																								; LINEINFO(overlay_fit_vs11.vsh)(15)
;    v0    = Position																								; LINEINFO(overlay_fit_vs11.vsh)(16)
;	 v7.xy = TexCoord0																								; LINEINFO(overlay_fit_vs11.vsh)(17)
;------------------------------------------------------------------------------																								; LINEINFO(overlay_fit_vs11.vsh)(18)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_color0 v5;																								; LINEINFO(macros.vsh)(46)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
dcl_texcoord1 v8;																								; LINEINFO(macros.vsh)(58)
dcl_texcoord2 v9;																								; LINEINFO(macros.vsh)(62)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
; Vertex components																								; LINEINFO(overlay_fit_vs11.vsh)(22)
;    v0		= Position																								; LINEINFO(overlay_fit_vs11.vsh)(23)
;	 v3		= normal																								; LINEINFO(overlay_fit_vs11.vsh)(24)
;	 v7.xy	= TexCoord0																								; LINEINFO(overlay_fit_vs11.vsh)(25)
;	 v11		= S axis of Texture space																								; LINEINFO(overlay_fit_vs11.vsh)(26)
;	 v12	= T axis of Texture space																								; LINEINFO(overlay_fit_vs11.vsh)(27)
;------------------------------------------------------------------------------																								; LINEINFO(overlay_fit_vs11.vsh)(29)
; Transform the position from world to view space																								; LINEINFO(overlay_fit_vs11.vsh)(30)
;------------------------------------------------------------------------------																								; LINEINFO(overlay_fit_vs11.vsh)(31)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $projPos = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position from world to projection space																								; LINEINFO(overlay_fit_vs11.vsh)(37)
dp4 r1.x, v0, c8																								; LINEINFO(overlay_fit_vs11.vsh)(38)
dp4 r1.y, v0, c9																								; LINEINFO(overlay_fit_vs11.vsh)(39)
dp4 r1.z, v0, c10																								; LINEINFO(overlay_fit_vs11.vsh)(40)
dp4 r1.w, v0, c11																								; LINEINFO(overlay_fit_vs11.vsh)(41)
mov oPos, r1																								; LINEINFO(overlay_fit_vs11.vsh)(42)
dp4 r0.z, v0, c50																								; LINEINFO(overlay_fit_vs11.vsh)(44)
; CalcFog																								; LINEINFO(macros.vsh)(493)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(413)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(414)
; only r0.z is used out of worldPos																								; LINEINFO(macros.vsh)(416)
; AllocateRegister $tmp = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; This is simple similar triangles. Imagine a line passing from the point directly vertically																								; LINEINFO(macros.vsh)(429)
; and another line passing from the point to the eye position.																								; LINEINFO(macros.vsh)(430)
; Let d = total distance from point to the eye																								; LINEINFO(macros.vsh)(431)
; Let h = vertical distance from the point to the eye																								; LINEINFO(macros.vsh)(432)
; Let hw = vertical distance from the point to the water surface																								; LINEINFO(macros.vsh)(433)
; Let dw = distance from the point to a point on the water surface that lies along the ray from point to eye																								; LINEINFO(macros.vsh)(434)
; Therefore d/h = dw/hw by similar triangles, or dw = d * hw / h.																								; LINEINFO(macros.vsh)(435)
; d = projPos.w, h = eyepos.z - worldPos.z, hw = waterheight.z - worldPos.z, dw = what we solve for																								; LINEINFO(macros.vsh)(436)
; Now, tmp.x = hw, and tmp.y = h																								; LINEINFO(macros.vsh)(438)
add r2.xy, c2.wz, -r0.z																								; LINEINFO(macros.vsh)(439)
; if r2.x < 0, then set it to 0																								; LINEINFO(macros.vsh)(441)
; This is the equivalent of moving the vert to the water surface if it's above the water surface																								; LINEINFO(macros.vsh)(442)
max r2.x, r2.x, c0.x																								; LINEINFO(macros.vsh)(443)
; Now we have 1/h																								; LINEINFO(macros.vsh)(445)
rcp r2.z, r2.y																								; LINEINFO(macros.vsh)(446)
; Now we have d/h																								; LINEINFO(macros.vsh)(448)
mul r2.w, r1.w, r2.z																								; LINEINFO(macros.vsh)(449)
; We finally have d * hw / h																								; LINEINFO(macros.vsh)(451)
; r2.w is now the distance that we see through water.																								; LINEINFO(macros.vsh)(452)
mul r2.w, r2.x, r2.w																								; LINEINFO(macros.vsh)(453)
mad r2, -r2.w, c16.w, c16.y																								; LINEINFO(macros.vsh)(457)
min r2, r2, c0.y																								; LINEINFO(macros.vsh)(458)
max oFog, r2.x, c0.x																								; LINEINFO(macros.vsh)(459)
; FreeRegister $tmp = r2																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r1																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)
mov oD0, v5																								; LINEINFO(overlay_fit_vs11.vsh)(51)
mov oT0, v7																								; LINEINFO(overlay_fit_vs11.vsh)(53)
mov oT1, v8																								; LINEINFO(overlay_fit_vs11.vsh)(54)
mov oT2, v9																								; LINEINFO(overlay_fit_vs11.vsh)(55)

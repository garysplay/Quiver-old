vs.1.1																								; LINEINFO(BumpmappedEnvmap.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(5)
; Shader specific constant:																								; LINEINFO(BumpmappedEnvmap.vsh)(6)
;	 c42, c43	= normal map transform																								; LINEINFO(BumpmappedEnvmap.vsh)(7)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(8)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
dcl_tangent v11;																								; LINEINFO(macros.vsh)(70)
dcl_binormal0 v12;																								; LINEINFO(macros.vsh)(74)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(12)
; Vertex blending																								; LINEINFO(BumpmappedEnvmap.vsh)(13)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(14)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position from object to world																								; LINEINFO(BumpmappedEnvmap.vsh)(18)
dp4 r0.x, v0, c48																								; LINEINFO(BumpmappedEnvmap.vsh)(19)
dp4 r0.y, v0, c49																								; LINEINFO(BumpmappedEnvmap.vsh)(20)
dp4 r0.z, v0, c50																								; LINEINFO(BumpmappedEnvmap.vsh)(21)
; AllocateRegister $projPos = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position from object to projection space																								; LINEINFO(BumpmappedEnvmap.vsh)(25)
dp4 r1.x, v0, c4																								; LINEINFO(BumpmappedEnvmap.vsh)(26)
dp4 r1.y, v0, c5																								; LINEINFO(BumpmappedEnvmap.vsh)(27)
dp4 r1.z, v0, c6																								; LINEINFO(BumpmappedEnvmap.vsh)(28)
dp4 r1.w, v0, c7																								; LINEINFO(BumpmappedEnvmap.vsh)(29)
mov oPos, r1																								; LINEINFO(BumpmappedEnvmap.vsh)(31)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(33)
; Lighting																								; LINEINFO(BumpmappedEnvmap.vsh)(34)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(35)
; Transform tangent space basis vectors to env map space (world space)																								; LINEINFO(BumpmappedEnvmap.vsh)(37)
; This will produce a set of vectors mapping from tangent space to env space																								; LINEINFO(BumpmappedEnvmap.vsh)(38)
; We'll use this to transform normals from the normal map from tangent space																								; LINEINFO(BumpmappedEnvmap.vsh)(39)
; to environment map space. 																								; LINEINFO(BumpmappedEnvmap.vsh)(40)
; NOTE: use dp3 here since the basis vectors are vectors, not points																								; LINEINFO(BumpmappedEnvmap.vsh)(41)
dp3 oT1.x, v11, c48																								; LINEINFO(BumpmappedEnvmap.vsh)(43)
dp3 oT2.x, v11, c49																								; LINEINFO(BumpmappedEnvmap.vsh)(44)
dp3 oT3.x, v11, c50																								; LINEINFO(BumpmappedEnvmap.vsh)(45)
dp3 oT1.y, v12, c48																								; LINEINFO(BumpmappedEnvmap.vsh)(47)
dp3 oT2.y, v12, c49																								; LINEINFO(BumpmappedEnvmap.vsh)(48)
dp3 oT3.y, v12, c50																								; LINEINFO(BumpmappedEnvmap.vsh)(49)
dp3 oT1.z, v3, c48																								; LINEINFO(BumpmappedEnvmap.vsh)(51)
dp3 oT2.z, v3, c49																								; LINEINFO(BumpmappedEnvmap.vsh)(52)
dp3 oT3.z, v3, c50																								; LINEINFO(BumpmappedEnvmap.vsh)(53)
; AllocateRegister $worldToEye = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldToEye = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Compute the vector from vertex to camera																								; LINEINFO(BumpmappedEnvmap.vsh)(57)
sub r2.xyz, c2, r0																								; LINEINFO(BumpmappedEnvmap.vsh)(58)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(60)
; Fog																								; LINEINFO(BumpmappedEnvmap.vsh)(61)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(62)
; CalcFog																								; LINEINFO(macros.vsh)(493)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(413)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(414)
; only r0.z is used out of worldPos																								; LINEINFO(macros.vsh)(416)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldToEye = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; This is simple similar triangles. Imagine a line passing from the point directly vertically																								; LINEINFO(macros.vsh)(429)
; and another line passing from the point to the eye position.																								; LINEINFO(macros.vsh)(430)
; Let d = total distance from point to the eye																								; LINEINFO(macros.vsh)(431)
; Let h = vertical distance from the point to the eye																								; LINEINFO(macros.vsh)(432)
; Let hw = vertical distance from the point to the water surface																								; LINEINFO(macros.vsh)(433)
; Let dw = distance from the point to a point on the water surface that lies along the ray from point to eye																								; LINEINFO(macros.vsh)(434)
; Therefore d/h = dw/hw by similar triangles, or dw = d * hw / h.																								; LINEINFO(macros.vsh)(435)
; d = projPos.w, h = eyepos.z - worldPos.z, hw = waterheight.z - worldPos.z, dw = what we solve for																								; LINEINFO(macros.vsh)(436)
; Now, tmp.x = hw, and tmp.y = h																								; LINEINFO(macros.vsh)(438)
add r3.xy, c2.wz, -r0.z																								; LINEINFO(macros.vsh)(439)
; if r3.x < 0, then set it to 0																								; LINEINFO(macros.vsh)(441)
; This is the equivalent of moving the vert to the water surface if it's above the water surface																								; LINEINFO(macros.vsh)(442)
max r3.x, r3.x, c0.x																								; LINEINFO(macros.vsh)(443)
; Now we have 1/h																								; LINEINFO(macros.vsh)(445)
rcp r3.z, r3.y																								; LINEINFO(macros.vsh)(446)
; Now we have d/h																								; LINEINFO(macros.vsh)(448)
mul r3.w, r1.w, r3.z																								; LINEINFO(macros.vsh)(449)
; We finally have d * hw / h																								; LINEINFO(macros.vsh)(451)
; r3.w is now the distance that we see through water.																								; LINEINFO(macros.vsh)(452)
mul r3.w, r3.x, r3.w																								; LINEINFO(macros.vsh)(453)
mad r3, -r3.w, c16.w, c16.y																								; LINEINFO(macros.vsh)(457)
min r3, r3, c0.y																								; LINEINFO(macros.vsh)(458)
max oFog, r3.x, c0.x																								; LINEINFO(macros.vsh)(459)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldToEye = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldToEye = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Move it into the w component of the texture coords, as the wacky																								; LINEINFO(BumpmappedEnvmap.vsh)(68)
; pixel shader wants it there.																								; LINEINFO(BumpmappedEnvmap.vsh)(69)
mov oT1.w, r2.x																								; LINEINFO(BumpmappedEnvmap.vsh)(70)
mov oT2.w, r2.y																								; LINEINFO(BumpmappedEnvmap.vsh)(71)
mov oT3.w, r2.z																								; LINEINFO(BumpmappedEnvmap.vsh)(72)
; FreeRegister $worldToEye = r2																								; LINEINFO(macros.vsh)(224)
;	if( $worldToEye ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldToEye																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(76)
; Texture coordinates (normal map)																								; LINEINFO(BumpmappedEnvmap.vsh)(77)
;------------------------------------------------------------------------------																								; LINEINFO(BumpmappedEnvmap.vsh)(78)
dp4 oT0.x, v7, c42																								; LINEINFO(BumpmappedEnvmap.vsh)(79)
dp4 oT0.y, v7, c43																								; LINEINFO(BumpmappedEnvmap.vsh)(80)
; FreeRegister $projPos = r1																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

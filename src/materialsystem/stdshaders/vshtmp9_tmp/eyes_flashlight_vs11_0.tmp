vs.1.1																								; LINEINFO(eyes_flashlight_vs11.vsh)(1)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $projPos = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(631)
; 0 bone skinning (4 instructions)																								; LINEINFO(macros.vsh)(632)
;																								; LINEINFO(macros.vsh)(633)
; Transform position into world space																								; LINEINFO(macros.vsh)(634)
; position																								; LINEINFO(macros.vsh)(635)
dp4 r0.x, v0, c48																								; LINEINFO(macros.vsh)(636)
dp4 r0.y, v0, c49																								; LINEINFO(macros.vsh)(637)
dp4 r0.z, v0, c50																								; LINEINFO(macros.vsh)(638)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(639)
;------------------------------------------------------------------------------																								; LINEINFO(eyes_flashlight_vs11.vsh)(16)
; Transform the position from world to view space																								; LINEINFO(eyes_flashlight_vs11.vsh)(17)
;------------------------------------------------------------------------------																								; LINEINFO(eyes_flashlight_vs11.vsh)(18)
dp4 r1.x, r0, c8																								; LINEINFO(eyes_flashlight_vs11.vsh)(19)
dp4 r1.y, r0, c9																								; LINEINFO(eyes_flashlight_vs11.vsh)(20)
dp4 r1.z, r0, c10																								; LINEINFO(eyes_flashlight_vs11.vsh)(21)
dp4 r1.w, r0, c11																								; LINEINFO(eyes_flashlight_vs11.vsh)(22)
;------------------------------------------------------------------------------																								; LINEINFO(eyes_flashlight_vs11.vsh)(24)
; Normal is based on vertex position 																								; LINEINFO(eyes_flashlight_vs11.vsh)(25)
;------------------------------------------------------------------------------																								; LINEINFO(eyes_flashlight_vs11.vsh)(26)
; AllocateRegister $worldNormal = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $normalDotUp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $normalDotUp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
sub r2, r0, c44		; Normal = (Pos - Eye origin)																								; LINEINFO(eyes_flashlight_vs11.vsh)(30)
dp3 r3, r2, c45		; Normal -= 0.5f * (Normal dot Eye Up) * Eye Up																								; LINEINFO(eyes_flashlight_vs11.vsh)(31)
mul r3, r3, c0.w																								; LINEINFO(eyes_flashlight_vs11.vsh)(32)
mad r2, -r3, c45, r2																								; LINEINFO(eyes_flashlight_vs11.vsh)(33)
; FreeRegister $normalDotUp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $normalDotUp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $normalDotUp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; normalize the normal																								; LINEINFO(eyes_flashlight_vs11.vsh)(37)
dp3 r2.w, r2, r2																								; LINEINFO(macros.vsh)(262)
rsq r2.w, r2.w																								; LINEINFO(macros.vsh)(263)
mul r2, r2, r2.w																								; LINEINFO(macros.vsh)(264)
mov oPos, r1																								; LINEINFO(eyes_flashlight_vs11.vsh)(40)
;------------------------------------------------------------------------------																								; LINEINFO(eyes_flashlight_vs11.vsh)(42)
; Fog																								; LINEINFO(eyes_flashlight_vs11.vsh)(43)
;------------------------------------------------------------------------------																								; LINEINFO(eyes_flashlight_vs11.vsh)(44)
; CalcFog																								; LINEINFO(macros.vsh)(493)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r3, -r1.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r3, r3, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r3.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; base tex coords																								; LINEINFO(eyes_flashlight_vs11.vsh)(47)
mov oT1.xy, v7																								; LINEINFO(eyes_flashlight_vs11.vsh)(48)
; spotlight texcoords																								; LINEINFO(eyes_flashlight_vs11.vsh)(50)
dp4 oT0.x, r0, c39																								; LINEINFO(eyes_flashlight_vs11.vsh)(51)
dp4 oT0.y, r0, c40																								; LINEINFO(eyes_flashlight_vs11.vsh)(52)
dp4 oT0.z, r0, c41																								; LINEINFO(eyes_flashlight_vs11.vsh)(53)
dp4 oT0.w, r0, c42																								; LINEINFO(eyes_flashlight_vs11.vsh)(54)
; AllocateRegister $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
sub r3, c38.xyz, r0																								; LINEINFO(eyes_flashlight_vs11.vsh)(60)
; AllocateRegister $distatten = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; r4 = [ 1, 1/dist, 1/distsquared ]																								; LINEINFO(eyes_flashlight_vs11.vsh)(64)
; dist squared																								; LINEINFO(eyes_flashlight_vs11.vsh)(66)
dp3 r4.z, r3, r3																								; LINEINFO(eyes_flashlight_vs11.vsh)(67)
; oodist																								; LINEINFO(eyes_flashlight_vs11.vsh)(69)
rsq r4.y, r4.z																								; LINEINFO(eyes_flashlight_vs11.vsh)(70)
mov r4.x, c0.y																								; LINEINFO(eyes_flashlight_vs11.vsh)(72)
; AllocateRegister $dist = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
; $dist = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r5.x, r4.z, r4.y																								; LINEINFO(eyes_flashlight_vs11.vsh)(76)
rcp r4.z, r4.z ; 1/distsquared																								; LINEINFO(eyes_flashlight_vs11.vsh)(78)
; AllocateRegister $endFalloffFactor = r6																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
; $dist = r5																								; LINEINFO(macros.vsh)(191)
; $endFalloffFactor = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; ( dist - farZ )																								; LINEINFO(eyes_flashlight_vs11.vsh)(83)
sub r6.x, r5.x, c43.w																								; LINEINFO(eyes_flashlight_vs11.vsh)(84)
; 1 / ( (0.6f * farZ) - farZ)																								; LINEINFO(eyes_flashlight_vs11.vsh)(85)
mul r6, r6.x, c38.w																								; LINEINFO(eyes_flashlight_vs11.vsh)(86)
max r6, r6, c0.x																								; LINEINFO(eyes_flashlight_vs11.vsh)(87)
min r6, r6, c0.y																								; LINEINFO(eyes_flashlight_vs11.vsh)(88)
; AllocateRegister $vertAtten = r7																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
; $dist = r5																								; LINEINFO(macros.vsh)(191)
; $endFalloffFactor = r6																								; LINEINFO(macros.vsh)(191)
; $vertAtten = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp3 r7, r4, c43																								; LINEINFO(eyes_flashlight_vs11.vsh)(92)
mul r7, r7, r6																								; LINEINFO(eyes_flashlight_vs11.vsh)(93)
; Normalize L																								; LINEINFO(eyes_flashlight_vs11.vsh)(95)
dp3 r3.w, r3, r3																								; LINEINFO(macros.vsh)(262)
rsq r3.w, r3.w																								; LINEINFO(macros.vsh)(263)
mul r3, r3, r3.w																								; LINEINFO(macros.vsh)(264)
; N.L																								; LINEINFO(eyes_flashlight_vs11.vsh)(98)
dp3 r2, r2, r3																								; LINEINFO(eyes_flashlight_vs11.vsh)(99)
; Modulate distance attenuation with N.L																								; LINEINFO(eyes_flashlight_vs11.vsh)(101)
mul oD0, r7, r2																								; LINEINFO(eyes_flashlight_vs11.vsh)(102)
; iris																								; LINEINFO(eyes_flashlight_vs11.vsh)(104)
dp4 oT3.x, c46, r0																								; LINEINFO(eyes_flashlight_vs11.vsh)(105)
dp4 oT3.y, c47, r0																								; LINEINFO(eyes_flashlight_vs11.vsh)(106)
; FreeRegister $dist = r5																								; LINEINFO(macros.vsh)(224)
;	if( $dist ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $dist																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
; $endFalloffFactor = r6																								; LINEINFO(macros.vsh)(191)
; $vertAtten = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $endFalloffFactor = r6																								; LINEINFO(macros.vsh)(224)
;	if( $endFalloffFactor ne g_allocatedname[r6] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r6																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $endFalloffFactor																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
; $vertAtten = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r2																								; LINEINFO(macros.vsh)(191)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
; $vertAtten = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldNormal = r2																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r1																								; LINEINFO(macros.vsh)(191)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
; $vertAtten = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r1																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(191)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
; $vertAtten = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPosToLightVector = r3																								; LINEINFO(macros.vsh)(224)
;	if( $worldPosToLightVector ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPosToLightVector																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $distatten = r4																								; LINEINFO(macros.vsh)(191)
; $vertAtten = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $distatten = r4																								; LINEINFO(macros.vsh)(224)
;	if( $distatten ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $distatten																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $vertAtten = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $vertAtten = r7																								; LINEINFO(macros.vsh)(224)
;	if( $vertAtten ne g_allocatedname[r7] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r7																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $vertAtten																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

vs.1.1																								; LINEINFO(LightingOnly.vsh)(1)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
dcl_color1 v6;																								; LINEINFO(macros.vsh)(50)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(LightingOnly.vsh)(10)
; Vertex blending 																								; LINEINFO(LightingOnly.vsh)(11)
;------------------------------------------------------------------------------																								; LINEINFO(LightingOnly.vsh)(12)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(714)
; 0 bone skinning (13 instructions)																								; LINEINFO(macros.vsh)(715)
;																								; LINEINFO(macros.vsh)(716)
; Transform position + normal + tangentS + tangentT into world space																								; LINEINFO(macros.vsh)(717)
; position																								; LINEINFO(macros.vsh)(718)
dp4 r0.x, v0, c48																								; LINEINFO(macros.vsh)(719)
dp4 r0.y, v0, c49																								; LINEINFO(macros.vsh)(720)
dp4 r0.z, v0, c50																								; LINEINFO(macros.vsh)(721)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(722)
; normal																								; LINEINFO(macros.vsh)(723)
dp3 r1.x, v3, c48																								; LINEINFO(macros.vsh)(724)
dp3 r1.y, v3, c49																								; LINEINFO(macros.vsh)(725)
dp3 r1.z, v3, c50																								; LINEINFO(macros.vsh)(726)
;------------------------------------------------------------------------------																								; LINEINFO(LightingOnly.vsh)(17)
; Transform the position from model to proj																								; LINEINFO(LightingOnly.vsh)(18)
;------------------------------------------------------------------------------																								; LINEINFO(LightingOnly.vsh)(19)
; AllocateRegister $projPos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r2.x, r0, c8																								; LINEINFO(LightingOnly.vsh)(23)
dp4 r2.y, r0, c9																								; LINEINFO(LightingOnly.vsh)(24)
dp4 r2.z, r0, c10																								; LINEINFO(LightingOnly.vsh)(25)
dp4 r2.w, r0, c11																								; LINEINFO(LightingOnly.vsh)(26)
mov oPos, r2																								; LINEINFO(LightingOnly.vsh)(27)
; CalcFog																								; LINEINFO(macros.vsh)(493)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r3, -r2.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r3, r3, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r3.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(LightingOnly.vsh)(33)
; Lighting																								; LINEINFO(LightingOnly.vsh)(34)
;------------------------------------------------------------------------------																								; LINEINFO(LightingOnly.vsh)(35)
; special case for no lighting																								; LINEINFO(macros.vsh)(1258)
; special case for static lighting only																								; LINEINFO(macros.vsh)(1267)
; Don't need to bother converting to linear space in this case.																								; LINEINFO(macros.vsh)(1268)
; AllocateRegister $linearColor = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $gammaColor = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; The static lighting comes in in gamma space and has also been premultiplied by c1.w																								; LINEINFO(macros.vsh)(1282)
; need to get it into																								; LINEINFO(macros.vsh)(1283)
; linear space so that we can do adds.																								; LINEINFO(macros.vsh)(1284)
rcp r3.w, c1.w																								; LINEINFO(macros.vsh)(1285)
mul r3.xyz, v6, r3.w																								; LINEINFO(macros.vsh)(1286)
; AllocateRegister $tmp = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $tmp = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Is rcp more expensive than just storing 2.2 somewhere and doing a mov?																								; LINEINFO(macros.vsh)(545)
rcp r3.w, c1.x							; r3.w = 2.2																								; LINEINFO(macros.vsh)(546)
lit r2.z, r3.zzzw						; r0.z = linear blue																								; LINEINFO(macros.vsh)(547)
lit r4.z, r3.yyyw							; r2.z = linear green																								; LINEINFO(macros.vsh)(548)
mov r2.y, r4.z							; r0.y = linear green																								; LINEINFO(macros.vsh)(549)
lit r4.z, r3.xxxw							; r2.z = linear red																								; LINEINFO(macros.vsh)(550)
mov r2.x, r4.z							; r0.x = linear red																								; LINEINFO(macros.vsh)(551)
; FreeRegister $tmp = r4																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Ambient lighting																								; LINEINFO(macros.vsh)(972)
; AllocateRegister $nSquared = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $nSquared = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $isNegative = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $nSquared = r4																								; LINEINFO(macros.vsh)(191)
; $isNegative = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r4.xyz, r1.xyz, r1.xyz				; compute n times n																								; LINEINFO(macros.vsh)(976)
slt r5.xyz, r1.xyz, c0.x				; Figure out whether each component is >0																								; LINEINFO(macros.vsh)(977)
mov a0.x, r5.x																								; LINEINFO(macros.vsh)(978)
mad r2.xyz, r4.x, c[a0.x + 21], r2			; r2 = normal[0]*normal[0] * box color of appropriate x side																								; LINEINFO(macros.vsh)(981)
mov a0.x, r5.y																								; LINEINFO(macros.vsh)(987)
mad r2.xyz, r4.y, c[a0.x + 23], r2																								; LINEINFO(macros.vsh)(988)
mov a0.x, r5.z																								; LINEINFO(macros.vsh)(989)
mad r2.xyz, r4.z, c[a0.x + 25], r2																								; LINEINFO(macros.vsh)(990)
; FreeRegister $isNegative = r5																								; LINEINFO(macros.vsh)(224)
;	if( $isNegative ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $isNegative																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $nSquared = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $nSquared = r4																								; LINEINFO(macros.vsh)(224)
;	if( $nSquared ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $nSquared																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mov a0.x, c3.x																								; LINEINFO(macros.vsh)(1299)
; AllocateRegister $lightDir = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; SPOTLIGHT																								; LINEINFO(macros.vsh)(1123)
; compute light direction																								; LINEINFO(macros.vsh)(1124)
sub r4, c[a0.x+2], r0																								; LINEINFO(macros.vsh)(1125)
; AllocateRegister $lightDistSquared = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $lightDistSquared = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $ooLightDist = r6																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $lightDistSquared = r5																								; LINEINFO(macros.vsh)(191)
; $ooLightDist = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; normalize light direction, maintain temporaries for attenuation																								; LINEINFO(macros.vsh)(1132)
dp3 r5, r4, r4																								; LINEINFO(macros.vsh)(1133)
rsq r6, r5.x																								; LINEINFO(macros.vsh)(1134)
mul r4, r4, r6.x																								; LINEINFO(macros.vsh)(1135)
; AllocateRegister $attenuationFactors = r7																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $lightDistSquared = r5																								; LINEINFO(macros.vsh)(191)
; $ooLightDist = r6																								; LINEINFO(macros.vsh)(191)
; $attenuationFactors = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; compute attenuation amount (r2 = 'd*d d*d d*d d*d', r3 = '1/d 1/d 1/d 1/d')																								; LINEINFO(macros.vsh)(1140)
dst r7, r5, r6						; r4 = ( 1, d, d*d, 1/d )																								; LINEINFO(macros.vsh)(1141)
; FreeRegister $lightDistSquared = r5																								; LINEINFO(macros.vsh)(224)
;	if( $lightDistSquared ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $lightDistSquared																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $ooLightDist = r6																								; LINEINFO(macros.vsh)(191)
; $attenuationFactors = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $ooLightDist = r6																								; LINEINFO(macros.vsh)(224)
;	if( $ooLightDist ne g_allocatedname[r6] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r6																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $ooLightDist																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $attenuationFactors = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $attenuation = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $attenuation = r5																								; LINEINFO(macros.vsh)(191)
; $attenuationFactors = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp3 r5, r7, c[a0.x+4]				; r3 = atten0 + d * atten1 + d*d * atten2																								; LINEINFO(macros.vsh)(1147)
rcp r4.w, r5						; r1.w = 1 / (atten0 + d * atten1 + d*d * atten2)																								; LINEINFO(macros.vsh)(1148)
; FreeRegister $attenuationFactors = r7																								; LINEINFO(macros.vsh)(224)
;	if( $attenuationFactors ne g_allocatedname[r7] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r7																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $attenuationFactors																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $attenuation = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $attenuation = r5																								; LINEINFO(macros.vsh)(224)
;	if( $attenuation ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $attenuation																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $litSrc = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $litSrc = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $tmp = r6																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $litSrc = r5																								; LINEINFO(macros.vsh)(191)
; $tmp = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; compute n dot l																								; LINEINFO(macros.vsh)(1156)
dp3 r5.x, r1, r4																								; LINEINFO(macros.vsh)(1157)
; half-lambert																								; LINEINFO(macros.vsh)(1166)
mad r5.x, r5.x, c0.w, c0.w	; dot = (dot * 0.5 + 0.5) ^ 2																								; LINEINFO(macros.vsh)(1167)
mul r5.x, r5.x, r5.x																								; LINEINFO(macros.vsh)(1168)
; compute angular attenuation																								; LINEINFO(macros.vsh)(1175)
dp3 r6.x, c[a0.x+1], -r4				; dot = -delta * spot direction																								; LINEINFO(macros.vsh)(1176)
sub r5.y, r6.x, c[a0.x+3].z				; r2.y = dot - stopdot2																								; LINEINFO(macros.vsh)(1177)
; FreeRegister $tmp = r6																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r6] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r6																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $litSrc = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r5.y, r5.y, c[a0.x+3].w			; r2.y = (dot - stopdot2) / (stopdot - stopdot2)																								; LINEINFO(macros.vsh)(1179)
mov r5.w, c[a0.x+3].x						; r2.w = exponent																								; LINEINFO(macros.vsh)(1180)
; AllocateRegister $litDst = r6																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $litSrc = r5																								; LINEINFO(macros.vsh)(191)
; $litDst = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
lit r6, r5							; r3.y = N dot L or 0, whichever is bigger																								; LINEINFO(macros.vsh)(1182)
; FreeRegister $litSrc = r5																								; LINEINFO(macros.vsh)(224)
;	if( $litSrc ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $litSrc																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $litDst = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; r3.z = pow((dot - stopdot2) / (stopdot - stopdot2), exponent)																								; LINEINFO(macros.vsh)(1184)
min r6.z, r6.z, c0.y		 			; clamp pow() to 1																								; LINEINFO(macros.vsh)(1185)
; AllocateRegister $tmp1 = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $tmp1 = r5																								; LINEINFO(macros.vsh)(191)
; $litDst = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $tmp2 = r7																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $lightDir = r4																								; LINEINFO(macros.vsh)(191)
; $tmp1 = r5																								; LINEINFO(macros.vsh)(191)
; $litDst = r6																								; LINEINFO(macros.vsh)(191)
; $tmp2 = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; fold in distance attenutation with other factors																								; LINEINFO(macros.vsh)(1190)
mul r5, c[a0.x], r4.w																								; LINEINFO(macros.vsh)(1191)
mul r7.x, r6.y, r6.z																								; LINEINFO(macros.vsh)(1192)
mad r2.xyz, r5, r7.x, r2																								; LINEINFO(macros.vsh)(1195)
; FreeRegister $lightDir = r4																								; LINEINFO(macros.vsh)(224)
;	if( $lightDir ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $lightDir																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $tmp1 = r5																								; LINEINFO(macros.vsh)(191)
; $litDst = r6																								; LINEINFO(macros.vsh)(191)
; $tmp2 = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $litDst = r6																								; LINEINFO(macros.vsh)(224)
;	if( $litDst ne g_allocatedname[r6] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r6																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $litDst																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $tmp1 = r5																								; LINEINFO(macros.vsh)(191)
; $tmp2 = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $tmp1 = r5																								; LINEINFO(macros.vsh)(224)
;	if( $tmp1 ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp1																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $tmp2 = r7																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $tmp2 = r7																								; LINEINFO(macros.vsh)(224)
;	if( $tmp2 ne g_allocatedname[r7] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r7																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp2																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(1311)
; Output color (gamma correction)																								; LINEINFO(macros.vsh)(1312)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(1313)
; AllocateRegister $tmp = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
; $tmp = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mov r2.w, c1.x						; r2.w = 1.0/2.2																								; LINEINFO(macros.vsh)(564)
lit r3.z, r2.zzzw						; r0.z = gamma blue																								; LINEINFO(macros.vsh)(565)
lit r4.z, r2.yyyw						; r2.z = gamma green																								; LINEINFO(macros.vsh)(566)
mov r3.y, r4.z							; r0.y = gamma green																								; LINEINFO(macros.vsh)(567)
lit r4.z, r2.xxxw						; r2.z = gamma red																								; LINEINFO(macros.vsh)(568)
mov r3.x, r4.z							; r0.x = gamma red																								; LINEINFO(macros.vsh)(569)
; FreeRegister $tmp = r4																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r3.xyz, r3.xyz, c1.w																								; LINEINFO(macros.vsh)(1322)
; ColorClamp; stomps .w																								; LINEINFO(macros.vsh)(951)
; Get the max of RGB and stick it in W																								; LINEINFO(macros.vsh)(955)
max r3.w, r3.x, r3.y																								; LINEINFO(macros.vsh)(956)
max r3.w, r3.w, r3.z																								; LINEINFO(macros.vsh)(957)
; get the greater of one and the max color.																								; LINEINFO(macros.vsh)(959)
max r3.w, r3.w, c0.y																								; LINEINFO(macros.vsh)(960)
rcp r3.w, r3.w																								; LINEINFO(macros.vsh)(962)
mul oD0.xyz, r3.w, r3.xyz																								; LINEINFO(macros.vsh)(963)
;	mov oD0.xyz, r2																								; LINEINFO(macros.vsh)(1326)
mov oD0.w, c0.y				; make sure all components are defined																								; LINEINFO(macros.vsh)(1327)
; FreeRegister $linearColor = r2																								; LINEINFO(macros.vsh)(224)
;	if( $linearColor ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $linearColor																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $gammaColor = r3																								; LINEINFO(macros.vsh)(224)
;	if( $gammaColor ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $gammaColor																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

vs.1.1																								; LINEINFO(Teeth.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(9)
;	 c38	 = xyz = mouth forward direction vector, w = illum factor																								; LINEINFO(Teeth.vsh)(10)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(11)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_blendweight v1;																								; LINEINFO(macros.vsh)(34)
dcl_blendindices v2;																								; LINEINFO(macros.vsh)(38)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(18)
; Vertex blending 																								; LINEINFO(Teeth.vsh)(19)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(20)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $boneIndices = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position into world space using all bones																								; LINEINFO(macros.vsh)(743)
; denormalize d3dcolor to matrix index																								; LINEINFO(macros.vsh)(744)
mad r2, v2, c3.z, c3.w																								; LINEINFO(macros.vsh)(745)
; r11 = boneindices at this point																								; LINEINFO(macros.vsh)(751)
; first matrix																								; LINEINFO(macros.vsh)(752)
mov a0.x, r2.z																								; LINEINFO(macros.vsh)(753)
mul r3, v1.x, c[a0.x]																								; LINEINFO(macros.vsh)(754)
mul r4, v1.x, c[a0.x+1]																								; LINEINFO(macros.vsh)(755)
mul r5, v1.x, c[a0.x+2]																								; LINEINFO(macros.vsh)(756)
; second matrix																								; LINEINFO(macros.vsh)(757)
mov a0.x, r2.y																								; LINEINFO(macros.vsh)(758)
mad r3, v1.y, c[a0.x], r3																								; LINEINFO(macros.vsh)(759)
mad r4, v1.y, c[a0.x+1], r4																								; LINEINFO(macros.vsh)(760)
mad r5, v1.y, c[a0.x+2], r5																								; LINEINFO(macros.vsh)(761)
; Calculate third weight																								; LINEINFO(macros.vsh)(763)
; compute 1-(weight1+weight2) to calculate weight2																								; LINEINFO(macros.vsh)(764)
; Use r2.w as a temp since we aren't using it for anything.																								; LINEINFO(macros.vsh)(765)
add r2.w, v1.x, v1.y																								; LINEINFO(macros.vsh)(766)
sub r2.w, c0.y, r2.w																								; LINEINFO(macros.vsh)(767)
; third matrix																								; LINEINFO(macros.vsh)(769)
mov a0.x, r2.x																								; LINEINFO(macros.vsh)(770)
mad r3, r2.w, c[a0.x], r3																								; LINEINFO(macros.vsh)(771)
mad r4, r2.w, c[a0.x+1], r4																								; LINEINFO(macros.vsh)(772)
mad r5, r2.w, c[a0.x+2], r5																								; LINEINFO(macros.vsh)(773)
dp4 r0.x, v0, r3																								; LINEINFO(macros.vsh)(775)
dp4 r0.y, v0, r4																								; LINEINFO(macros.vsh)(776)
dp4 r0.z, v0, r5																								; LINEINFO(macros.vsh)(777)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(778)
; normal																								; LINEINFO(macros.vsh)(780)
dp3 r1.x, v3, r3																								; LINEINFO(macros.vsh)(781)
dp3 r1.y, v3, r4																								; LINEINFO(macros.vsh)(782)
dp3 r1.z, v3, r5																								; LINEINFO(macros.vsh)(783)
; FreeRegister $boneIndices = r2																								; LINEINFO(macros.vsh)(224)
;	if( $boneIndices ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $boneIndices																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix0 ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix0																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix1 ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix1																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix2 ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix2																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(25)
; Optional intro warping																								; LINEINFO(Teeth.vsh)(26)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(27)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(37)
; Transform the position from world to view space																								; LINEINFO(Teeth.vsh)(38)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(39)
; AllocateRegister $projPos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r2.x, r0, c8																								; LINEINFO(Teeth.vsh)(43)
dp4 r2.y, r0, c9																								; LINEINFO(Teeth.vsh)(44)
dp4 r2.z, r0, c10																								; LINEINFO(Teeth.vsh)(45)
dp4 r2.w, r0, c11																								; LINEINFO(Teeth.vsh)(46)
mov oPos, r2																								; LINEINFO(Teeth.vsh)(47)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(49)
; Fog																								; LINEINFO(Teeth.vsh)(50)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(51)
; CalcFog																								; LINEINFO(macros.vsh)(493)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(413)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(414)
; only r0.z is used out of worldPos																								; LINEINFO(macros.vsh)(416)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; This is simple similar triangles. Imagine a line passing from the point directly vertically																								; LINEINFO(macros.vsh)(429)
; and another line passing from the point to the eye position.																								; LINEINFO(macros.vsh)(430)
; Let d = total distance from point to the eye																								; LINEINFO(macros.vsh)(431)
; Let h = vertical distance from the point to the eye																								; LINEINFO(macros.vsh)(432)
; Let hw = vertical distance from the point to the water surface																								; LINEINFO(macros.vsh)(433)
; Let dw = distance from the point to a point on the water surface that lies along the ray from point to eye																								; LINEINFO(macros.vsh)(434)
; Therefore d/h = dw/hw by similar triangles, or dw = d * hw / h.																								; LINEINFO(macros.vsh)(435)
; d = projPos.w, h = eyepos.z - worldPos.z, hw = waterheight.z - worldPos.z, dw = what we solve for																								; LINEINFO(macros.vsh)(436)
; Now, tmp.x = hw, and tmp.y = h																								; LINEINFO(macros.vsh)(438)
add r3.xy, c2.wz, -r0.z																								; LINEINFO(macros.vsh)(439)
; if r3.x < 0, then set it to 0																								; LINEINFO(macros.vsh)(441)
; This is the equivalent of moving the vert to the water surface if it's above the water surface																								; LINEINFO(macros.vsh)(442)
max r3.x, r3.x, c0.x																								; LINEINFO(macros.vsh)(443)
; Now we have 1/h																								; LINEINFO(macros.vsh)(445)
rcp r3.z, r3.y																								; LINEINFO(macros.vsh)(446)
; Now we have d/h																								; LINEINFO(macros.vsh)(448)
mul r3.w, r2.w, r3.z																								; LINEINFO(macros.vsh)(449)
; We finally have d * hw / h																								; LINEINFO(macros.vsh)(451)
; r3.w is now the distance that we see through water.																								; LINEINFO(macros.vsh)(452)
mul r3.w, r3.x, r3.w																								; LINEINFO(macros.vsh)(453)
mad r3, -r3.w, c16.w, c16.y																								; LINEINFO(macros.vsh)(457)
min r3, r3, c0.y																								; LINEINFO(macros.vsh)(458)
max oFog, r3.x, c0.x																								; LINEINFO(macros.vsh)(459)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(57)
; Lighting																								; LINEINFO(Teeth.vsh)(58)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(59)
; AllocateRegister $linearColor = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Ambient lighting																								; LINEINFO(macros.vsh)(972)
; AllocateRegister $nSquared = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $nSquared = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $isNegative = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $nSquared = r3																								; LINEINFO(macros.vsh)(191)
; $isNegative = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r3.xyz, r1.xyz, r1.xyz				; compute n times n																								; LINEINFO(macros.vsh)(976)
slt r4.xyz, r1.xyz, c0.x				; Figure out whether each component is >0																								; LINEINFO(macros.vsh)(977)
mov a0.x, r4.x																								; LINEINFO(macros.vsh)(978)
mul r2.xyz, r3.x, c[a0.x + 21]			; r2 = normal[0]*normal[0] * box color of appropriate x side																								; LINEINFO(macros.vsh)(985)
mov a0.x, r4.y																								; LINEINFO(macros.vsh)(987)
mad r2.xyz, r3.y, c[a0.x + 23], r2																								; LINEINFO(macros.vsh)(988)
mov a0.x, r4.z																								; LINEINFO(macros.vsh)(989)
mad r2.xyz, r3.z, c[a0.x + 25], r2																								; LINEINFO(macros.vsh)(990)
; FreeRegister $isNegative = r4																								; LINEINFO(macros.vsh)(224)
;	if( $isNegative ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $isNegative																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $nSquared = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $nSquared = r3																								; LINEINFO(macros.vsh)(224)
;	if( $nSquared ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $nSquared																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mov a0.x, c3.x																								; LINEINFO(macros.vsh)(1370)
; AllocateRegister $lightDir = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; POINT LIGHT																								; LINEINFO(macros.vsh)(1047)
; compute light direction																								; LINEINFO(macros.vsh)(1048)
sub r3, c[a0.x+2], r0																								; LINEINFO(macros.vsh)(1049)
; AllocateRegister $lightDistSquared = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
; $lightDistSquared = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $ooLightDist = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
; $lightDistSquared = r4																								; LINEINFO(macros.vsh)(191)
; $ooLightDist = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; normalize light direction, maintain temporaries for attenuation																								; LINEINFO(macros.vsh)(1056)
dp3 r4, r3, r3																								; LINEINFO(macros.vsh)(1057)
rsq r5, r4.x																								; LINEINFO(macros.vsh)(1058)
mul r3, r3, r5.x																								; LINEINFO(macros.vsh)(1059)
; AllocateRegister $attenuationFactors = r6																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
; $lightDistSquared = r4																								; LINEINFO(macros.vsh)(191)
; $ooLightDist = r5																								; LINEINFO(macros.vsh)(191)
; $attenuationFactors = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; compute attenuation amount (r2 = 'd*d d*d d*d d*d', r3 = '1/d 1/d 1/d 1/d')																								; LINEINFO(macros.vsh)(1064)
dst r6, r4, r5						; r4 = ( 1, d, d*d, 1/d )																								; LINEINFO(macros.vsh)(1065)
; FreeRegister $lightDistSquared = r4																								; LINEINFO(macros.vsh)(224)
;	if( $lightDistSquared ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $lightDistSquared																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
; $ooLightDist = r5																								; LINEINFO(macros.vsh)(191)
; $attenuationFactors = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $ooLightDist = r5																								; LINEINFO(macros.vsh)(224)
;	if( $ooLightDist ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $ooLightDist																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
; $attenuationFactors = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $attenuation = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
; $attenuation = r4																								; LINEINFO(macros.vsh)(191)
; $attenuationFactors = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp3 r4, r6, c[a0.x+4]				; r3 = atten0 + d * atten1 + d*d * atten2																								; LINEINFO(macros.vsh)(1070)
rcp r3.w, r4						; r3.w = 1 / (atten0 + d * atten1 + d*d * atten2)																								; LINEINFO(macros.vsh)(1072)
; FreeRegister $attenuationFactors = r6																								; LINEINFO(macros.vsh)(224)
;	if( $attenuationFactors ne g_allocatedname[r6] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r6																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $attenuationFactors																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
; $attenuation = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $attenuation = r4																								; LINEINFO(macros.vsh)(224)
;	if( $attenuation ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $attenuation																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $tmp = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $lightDir = r3																								; LINEINFO(macros.vsh)(191)
; $tmp = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; compute n dot l, fold in distance attenutation																								; LINEINFO(macros.vsh)(1080)
dp3 r4.x, r3, r1																								; LINEINFO(macros.vsh)(1081)
; lambert																								; LINEINFO(macros.vsh)(1085)
max r4.x, r4.x, c0.x				; Clamp to zero																								; LINEINFO(macros.vsh)(1086)
mul r4.x, r4.x, r3.w																								; LINEINFO(macros.vsh)(1099)
mad r2.xyz, c[a0.x], r4.x, r2																								; LINEINFO(macros.vsh)(1102)
; FreeRegister $lightDir = r3																								; LINEINFO(macros.vsh)(224)
;	if( $lightDir ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $lightDir																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $tmp = r4																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(63)
; Factor in teeth darkening factors																								; LINEINFO(Teeth.vsh)(64)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(65)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul r2.xyz, c38.w, r2	; FIXME Color darkened by illumination factor																								; LINEINFO(Teeth.vsh)(69)
dp3 r3, r1, c38					; Figure out mouth forward dot normal																								; LINEINFO(Teeth.vsh)(70)
max	r3, c0.x, r3						; clamp from 0 to 1																								; LINEINFO(Teeth.vsh)(71)
mul r2.xyz, r3, r2	; Darken by forward dot normal too																								; LINEINFO(Teeth.vsh)(72)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(74)
; Output color (gamma correction)																								; LINEINFO(Teeth.vsh)(75)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(76)
; AllocateRegister $gammaColor = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $tmp = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
; $tmp = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mov r2.w, c1.x						; r2.w = 1.0/2.2																								; LINEINFO(macros.vsh)(564)
lit r4.z, r2.zzzw						; r0.z = gamma blue																								; LINEINFO(macros.vsh)(565)
lit r5.z, r2.yyyw						; r2.z = gamma green																								; LINEINFO(macros.vsh)(566)
mov r4.y, r5.z							; r0.y = gamma green																								; LINEINFO(macros.vsh)(567)
lit r5.z, r2.xxxw						; r2.z = gamma red																								; LINEINFO(macros.vsh)(568)
mov r4.x, r5.z							; r0.x = gamma red																								; LINEINFO(macros.vsh)(569)
; FreeRegister $tmp = r5																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $linearColor = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $linearColor = r2																								; LINEINFO(macros.vsh)(224)
;	if( $linearColor ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $linearColor																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
; $gammaColor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mul oD0.xyz, r4.xyz, c1.w																								; LINEINFO(Teeth.vsh)(81)
mov oD0.w, c0.y				; make sure all components are defined																								; LINEINFO(Teeth.vsh)(82)
; FreeRegister $gammaColor = r4																								; LINEINFO(macros.vsh)(224)
;	if( $gammaColor ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $gammaColor																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(90)
; Texture coordinates																								; LINEINFO(Teeth.vsh)(91)
;------------------------------------------------------------------------------																								; LINEINFO(Teeth.vsh)(92)
mov oT0, v7																								; LINEINFO(Teeth.vsh)(94)

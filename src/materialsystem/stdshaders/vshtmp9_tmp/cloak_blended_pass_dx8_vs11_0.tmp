vs.1.1																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(3)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(6)
; Vertex blending 																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(7)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(8)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $projPos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(714)
; 0 bone skinning (13 instructions)																								; LINEINFO(macros.vsh)(715)
;																								; LINEINFO(macros.vsh)(716)
; Transform position + normal + tangentS + tangentT into world space																								; LINEINFO(macros.vsh)(717)
; position																								; LINEINFO(macros.vsh)(718)
dp4 r0.x, v0, c48																								; LINEINFO(macros.vsh)(719)
dp4 r0.y, v0, c49																								; LINEINFO(macros.vsh)(720)
dp4 r0.z, v0, c50																								; LINEINFO(macros.vsh)(721)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(722)
; normal																								; LINEINFO(macros.vsh)(723)
dp3 r1.x, v3, c48																								; LINEINFO(macros.vsh)(724)
dp3 r1.y, v3, c49																								; LINEINFO(macros.vsh)(725)
dp3 r1.z, v3, c50																								; LINEINFO(macros.vsh)(726)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(20)
; Transform the position from world to view space																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(21)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(22)
dp4 r2.x, r0, c8																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(23)
dp4 r2.y, r0, c9																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(24)
dp4 r2.z, r0, c10																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(25)
dp4 r2.w, r0, c11																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(26)
mov oPos, r2																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(28)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(30)
; Fog - don't bother with water fog for intro effects																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(31)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(32)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r3, -r2.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r3, r3, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r3.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(35)
; Refract uv's (Code copied from predator.vsh)																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(36)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(37)
; NOTE: projPos isn't projPos after this point. :)																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(38)
; AllocateRegister $projNormal = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $projNormal = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; only do X and Y since that's all we care about																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(42)
dp3 r3.x, r1, c8																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(43)
dp3 r3.y, r1, c9																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(44)
; divide by z																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(46)
rcp r2.w, r2.w																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(47)
mul r2.xy, r2.w, r2.xy																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(48)
; map from -1..1 to 0..1																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(50)
mad r2.xy, r2.xy, c0.w, c0.w																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(51)
; tweak with the texcoords based on the normal and 																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(53)
mad r2.xy, r3.xy, -c42.xy, r2.xy		; FIXME																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(54)
; invert y																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(56)
add r2.y, c0.y, -r2.y																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(57)
; hack scale for nvidia (Power of two texcoords are screwed.)																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(59)
mul oT0.xy, r2.xy, c43.xy																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(60)
; YUCK!  This is to make texcoords continuous for mat_softwaretl																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(62)
mov oT2, c0.x																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(63)
; FreeRegister $projPos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projNormal = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projNormal = r3																								; LINEINFO(macros.vsh)(224)
;	if( $projNormal ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(68)
; Refract mask																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(69)
;------------------------------------------------------------------------------																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(70)
; // float flFresnel = 1.0f - saturate( dot( i.vWorldNormal.xyz, normalize( -i.vWorldViewVector.xyz ) ) );																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(72)
; AllocateRegister $flFresnel = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $flFresnel = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $tmp1 = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $flFresnel = r2																								; LINEINFO(macros.vsh)(191)
; $tmp1 = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
sub r2, r0, c2																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(76)
dp3 r2.w, r2, r2																								; LINEINFO(macros.vsh)(262)
rsq r2.w, r2.w																								; LINEINFO(macros.vsh)(263)
mul r2, r2, r2.w																								; LINEINFO(macros.vsh)(264)
dp3 r2, -r2, r1																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(78)
max r2, r2, c0.x																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(79)
sub r2, c0.y, r2																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(80)
; // float flCloakLerpFactor = saturate( lerp( 1.0f, flFresnel - 1.35f, saturate( g_flCloakFactor ) ) );																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(82)
; AllocateRegister $flCloakLerpFactor = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $flFresnel = r2																								; LINEINFO(macros.vsh)(191)
; $tmp1 = r3																								; LINEINFO(macros.vsh)(191)
; $flCloakLerpFactor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
sub r4, r2, c41.x ; // flFresnel - 1.35f																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(85)
mov r3, c0.y																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(86)
sub r4, r4, r3																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(87)
mad r4, r4, c41.y, r3																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(88)
max r4, r4, c0.x																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(89)
min r4, r4, c0.y																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(90)
; // flCloakLerpFactor = 1.0f - smoothstep( 0.4f, 0.425f, flCloakLerpFactor );																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(92)
sub r4, r4, c41.z																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(93)
mul r4, r4, c41.w																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(94)
sub r4, c0.y, r4																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(95)
mov oD0, r4																								; LINEINFO(cloak_blended_pass_dx8_vs11.vsh)(97)
; FreeRegister $tmp1 = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp1 ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp1																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $flFresnel = r2																								; LINEINFO(macros.vsh)(191)
; $flCloakLerpFactor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $flFresnel = r2																								; LINEINFO(macros.vsh)(224)
;	if( $flFresnel ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $flFresnel																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $flCloakLerpFactor = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $flCloakLerpFactor = r4																								; LINEINFO(macros.vsh)(224)
;	if( $flCloakLerpFactor ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $flCloakLerpFactor																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

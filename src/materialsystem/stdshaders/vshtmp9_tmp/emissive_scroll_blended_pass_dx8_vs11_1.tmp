vs.1.1																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(3)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_blendweight v1;																								; LINEINFO(macros.vsh)(34)
dcl_blendindices v2;																								; LINEINFO(macros.vsh)(38)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
dcl_texcoord0 v7;																								; LINEINFO(macros.vsh)(54)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(6)
; Vertex blending 																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(7)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(8)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $projPos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $boneIndices = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix0 = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix1 = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix2 = r6																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r5																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position into world space using all bones																								; LINEINFO(macros.vsh)(743)
; denormalize d3dcolor to matrix index																								; LINEINFO(macros.vsh)(744)
mad r3, v2, c3.z, c3.w																								; LINEINFO(macros.vsh)(745)
; r11 = boneindices at this point																								; LINEINFO(macros.vsh)(751)
; first matrix																								; LINEINFO(macros.vsh)(752)
mov a0.x, r3.z																								; LINEINFO(macros.vsh)(753)
mul r4, v1.x, c[a0.x]																								; LINEINFO(macros.vsh)(754)
mul r5, v1.x, c[a0.x+1]																								; LINEINFO(macros.vsh)(755)
mul r6, v1.x, c[a0.x+2]																								; LINEINFO(macros.vsh)(756)
; second matrix																								; LINEINFO(macros.vsh)(757)
mov a0.x, r3.y																								; LINEINFO(macros.vsh)(758)
mad r4, v1.y, c[a0.x], r4																								; LINEINFO(macros.vsh)(759)
mad r5, v1.y, c[a0.x+1], r5																								; LINEINFO(macros.vsh)(760)
mad r6, v1.y, c[a0.x+2], r6																								; LINEINFO(macros.vsh)(761)
; Calculate third weight																								; LINEINFO(macros.vsh)(763)
; compute 1-(weight1+weight2) to calculate weight2																								; LINEINFO(macros.vsh)(764)
; Use r3.w as a temp since we aren't using it for anything.																								; LINEINFO(macros.vsh)(765)
add r3.w, v1.x, v1.y																								; LINEINFO(macros.vsh)(766)
sub r3.w, c0.y, r3.w																								; LINEINFO(macros.vsh)(767)
; third matrix																								; LINEINFO(macros.vsh)(769)
mov a0.x, r3.x																								; LINEINFO(macros.vsh)(770)
mad r4, r3.w, c[a0.x], r4																								; LINEINFO(macros.vsh)(771)
mad r5, r3.w, c[a0.x+1], r5																								; LINEINFO(macros.vsh)(772)
mad r6, r3.w, c[a0.x+2], r6																								; LINEINFO(macros.vsh)(773)
dp4 r0.x, v0, r4																								; LINEINFO(macros.vsh)(775)
dp4 r0.y, v0, r5																								; LINEINFO(macros.vsh)(776)
dp4 r0.z, v0, r6																								; LINEINFO(macros.vsh)(777)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(778)
; normal																								; LINEINFO(macros.vsh)(780)
dp3 r1.x, v3, r4																								; LINEINFO(macros.vsh)(781)
dp3 r1.y, v3, r5																								; LINEINFO(macros.vsh)(782)
dp3 r1.z, v3, r6																								; LINEINFO(macros.vsh)(783)
; FreeRegister $boneIndices = r3																								; LINEINFO(macros.vsh)(224)
;	if( $boneIndices ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $boneIndices																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r5																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix0 = r4																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix0 ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix0																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r5																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix1 = r5																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix1 ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix1																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r6																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix2 = r6																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix2 ne g_allocatedname[r6] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r6																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix2																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp3 r1.w, r1, r1																								; LINEINFO(macros.vsh)(262)
rsq r1.w, r1.w																								; LINEINFO(macros.vsh)(263)
mul r1, r1, r1.w																								; LINEINFO(macros.vsh)(264)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(20)
; Transform the position from world to view space																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(21)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(22)
dp4 r2.x, r0, c8																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(23)
dp4 r2.y, r0, c9																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(24)
dp4 r2.z, r0, c10																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(25)
dp4 r2.w, r0, c11																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(26)
mov oPos, r2																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(28)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(30)
; Fog - don't bother with water fog for intro effects																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(31)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(32)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r3, -r2.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r3, r3, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r3.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projPos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(36)
; Lighting																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(37)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(38)
mov oD0, c0.w																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(39)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(41)
; Texture coordinates																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(42)
;------------------------------------------------------------------------------																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(43)
dp4 oT0.x, v7, c38																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(45)
dp4 oT0.y, v7, c39																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(46)
; AllocateRegister $tmp2 = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $tmp2 = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r2.x, v7, c38																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(50)
dp4 r2.y, v7, c39																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(51)
add oT1.xy, r2, c42																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(53)
; FreeRegister $tmp2 = r2																								; LINEINFO(macros.vsh)(224)
;	if( $tmp2 ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp2																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; YUCK!  This is to make texcoords continuous for mat_softwaretl																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(57)
mov oT2, c0.x																								; LINEINFO(emissive_scroll_blended_pass_dx8_vs11.vsh)(58)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

vs.1.1																								; LINEINFO(predator.vsh)(1)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(6)
; Constants specified by the app																								; LINEINFO(predator.vsh)(7)
;    c0      = (0, 1, 2, 0.5)																								; LINEINFO(predator.vsh)(8)
;	 c1		 = (1/2.2, 0, 0, 0)																								; LINEINFO(predator.vsh)(9)
;    c2      = camera position *in world space*																								; LINEINFO(predator.vsh)(10)
;    c4-c7   = modelViewProj matrix	(transpose)																								; LINEINFO(predator.vsh)(11)
;    c8-c11  = ViewProj matrix (transpose)																								; LINEINFO(predator.vsh)(12)
;    c12-c15 = model->view matrix (transpose)																								; LINEINFO(predator.vsh)(13)
;	 c16	 = [fogStart, fogEnd, fogRange, undefined]																								; LINEINFO(predator.vsh)(14)
;																								; LINEINFO(predator.vsh)(15)
; Vertex components (as specified in the vertex DECL)																								; LINEINFO(predator.vsh)(16)
;    v0    = Position																								; LINEINFO(predator.vsh)(17)
;	 v7.xy = TexCoord0																								; LINEINFO(predator.vsh)(18)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(19)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(23)
; Vertex blending 																								; LINEINFO(predator.vsh)(24)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(25)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;																								; LINEINFO(macros.vsh)(714)
; 0 bone skinning (13 instructions)																								; LINEINFO(macros.vsh)(715)
;																								; LINEINFO(macros.vsh)(716)
; Transform position + normal + tangentS + tangentT into world space																								; LINEINFO(macros.vsh)(717)
; position																								; LINEINFO(macros.vsh)(718)
dp4 r0.x, v0, c48																								; LINEINFO(macros.vsh)(719)
dp4 r0.y, v0, c49																								; LINEINFO(macros.vsh)(720)
dp4 r0.z, v0, c50																								; LINEINFO(macros.vsh)(721)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(722)
; normal																								; LINEINFO(macros.vsh)(723)
dp3 r1.x, v3, c48																								; LINEINFO(macros.vsh)(724)
dp3 r1.y, v3, c49																								; LINEINFO(macros.vsh)(725)
dp3 r1.z, v3, c50																								; LINEINFO(macros.vsh)(726)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(30)
; Transform the position from world to proj space																								; LINEINFO(predator.vsh)(31)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(32)
; AllocateRegister $projPos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r2.x, r0, c8																								; LINEINFO(predator.vsh)(36)
dp4 r2.y, r0, c9																								; LINEINFO(predator.vsh)(37)
dp4 r2.z, r0, c10																								; LINEINFO(predator.vsh)(38)
dp4 r2.w, r0, c11																								; LINEINFO(predator.vsh)(39)
mov oPos, r2																								; LINEINFO(predator.vsh)(40)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(43)
; Fog																								; LINEINFO(predator.vsh)(44)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(45)
; CalcFog																								; LINEINFO(macros.vsh)(493)
;------------------------------																								; LINEINFO(macros.vsh)(323)
; Regular range fog																								; LINEINFO(macros.vsh)(324)
;------------------------------																								; LINEINFO(macros.vsh)(325)
; oFog.x = 1.0f = no fog																								; LINEINFO(macros.vsh)(327)
; oFog.x = 0.0f = full fog																								; LINEINFO(macros.vsh)(328)
; compute fog factor f = (fog_end - dist)*(1/(fog_end-fog_start))																								; LINEINFO(macros.vsh)(329)
; this is == to: (fog_end/(fog_end-fog_start) - dist/(fog_end-fog_start)																								; LINEINFO(macros.vsh)(330)
; which can be expressed with a single mad instruction!																								; LINEINFO(macros.vsh)(331)
; Compute |projPos|																								; LINEINFO(macros.vsh)(333)
; AllocateRegister $tmp = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
; $tmp = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
mad r3, -r2.w, c16.w, c16.x																								; LINEINFO(macros.vsh)(339)
min r3, r3, c0.y																								; LINEINFO(macros.vsh)(340)
max oFog, r3.x, c16.z																								; LINEINFO(macros.vsh)(341)
; FreeRegister $tmp = r3																								; LINEINFO(macros.vsh)(224)
;	if( $tmp ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $tmp																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(51)
; Transform the normal from world to proj space																								; LINEINFO(predator.vsh)(52)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(53)
; AllocateRegister $projNormal = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projNormal = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; only do X and Y since that's all we care about																								; LINEINFO(predator.vsh)(57)
dp3 r0.x, r1, c8																								; LINEINFO(predator.vsh)(58)
dp3 r0.y, r1, c9																								; LINEINFO(predator.vsh)(59)
; FreeRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projNormal = r0																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(63)
; Texture coordinates																								; LINEINFO(predator.vsh)(64)
;------------------------------------------------------------------------------																								; LINEINFO(predator.vsh)(65)
; NOTE: projPos isn't projPos after this point. :)																								; LINEINFO(predator.vsh)(67)
; divide by z																								; LINEINFO(predator.vsh)(69)
rcp r2.w, r2.w																								; LINEINFO(predator.vsh)(70)
mul r2.xy, r2.w, r2.xy																								; LINEINFO(predator.vsh)(71)
; map from -1..1 to 0..1																								; LINEINFO(predator.vsh)(73)
mad r2.xy, r2.xy, c0.w, c0.w																								; LINEINFO(predator.vsh)(74)
; tweak with the texcoords based on the normal and 																								; LINEINFO(predator.vsh)(76)
mad r2.xy, r0.xy, -c42.xy, r2.xy		; FIXME																								; LINEINFO(predator.vsh)(77)
; invert y																								; LINEINFO(predator.vsh)(79)
add r2.y, c0.y, -r2.y																								; LINEINFO(predator.vsh)(80)
; hack scale for nvidia (Power of two texcoords are screwed.)																								; LINEINFO(predator.vsh)(82)
mul oT0.xy, r2.xy, c43.xy																								; LINEINFO(predator.vsh)(83)
; FreeRegister $projPos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projNormal = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $projNormal = r0																								; LINEINFO(macros.vsh)(224)
;	if( $projNormal ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

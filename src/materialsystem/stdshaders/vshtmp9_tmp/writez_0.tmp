vs.1.1																								; LINEINFO(writez.vsh)(1)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(writez.vsh)(7)
;	 c38-c39 = Base texture transform																								; LINEINFO(writez.vsh)(8)
;    c40-c41 = Mask texture transform																								; LINEINFO(writez.vsh)(9)
;	 c42	 = Modulation color 																								; LINEINFO(writez.vsh)(10)
;------------------------------------------------------------------------------																								; LINEINFO(writez.vsh)(11)
; AllocateRegister $projPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $projPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r0.x, v0, c4																								; LINEINFO(writez.vsh)(15)
dp4 r0.y, v0, c5																								; LINEINFO(writez.vsh)(16)
dp4 r0.z, v0, c6																								; LINEINFO(writez.vsh)(17)
dp4 r0.w, v0, c7																								; LINEINFO(writez.vsh)(18)
mov oPos, r0																								; LINEINFO(writez.vsh)(19)
; FreeRegister $projPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)

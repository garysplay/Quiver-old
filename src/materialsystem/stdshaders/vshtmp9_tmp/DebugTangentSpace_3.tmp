vs.1.1																								; LINEINFO(DebugTangentSpace.vsh)(1)
;------------------------------------																								; LINEINFO(macros.vsh)(1)
; RULES FOR AUTHORING VERTEX SHADERS:																								; LINEINFO(macros.vsh)(2)
;------------------------------------																								; LINEINFO(macros.vsh)(3)
; - never use "def" . . .set constants in code instead. . our constant shadowing will break otherwise.																								; LINEINFO(macros.vsh)(4)
;	(same goes for pixel shaders)																								; LINEINFO(macros.vsh)(5)
; - use cN notation instead of c[N] notation. .makes grepping for registers easier.																								; LINEINFO(macros.vsh)(6)
;   The only exception is c[a0.x+blah] where you have no choice.																								; LINEINFO(macros.vsh)(7)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(10)
dcl_position v0;																								; LINEINFO(macros.vsh)(29)
dcl_blendweight v1;																								; LINEINFO(macros.vsh)(34)
dcl_blendindices v2;																								; LINEINFO(macros.vsh)(38)
dcl_normal v3;																								; LINEINFO(macros.vsh)(42)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(111)
; currently unused																								; LINEINFO(macros.vsh)(122)
; c12, c13																								; LINEINFO(macros.vsh)(123)
; c14 is c14																								; LINEINFO(macros.vsh)(174)
; c15 is c15																								; LINEINFO(macros.vsh)(175)
; There are 16 model matrices for skinning																								; LINEINFO(macros.vsh)(177)
; NOTE: These must match the same values in vsh_prep.pl!																								; LINEINFO(macros.vsh)(178)
; pass in a reference to a var that contains a register. . ie $var where var will constain "r1", etc																								; LINEINFO(macros.vsh)(219)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(472)
; Main fogging routine																								; LINEINFO(macros.vsh)(473)
;------------------------------------------------------------------------------																								; LINEINFO(macros.vsh)(474)
;------------------------------------------------------------------------------																								; LINEINFO(DebugTangentSpace.vsh)(8)
; Vertex blending 																								; LINEINFO(DebugTangentSpace.vsh)(9)
;------------------------------------------------------------------------------																								; LINEINFO(DebugTangentSpace.vsh)(10)
; AllocateRegister $worldPos = r0																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $boneIndices = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; AllocateRegister $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $boneIndices = r2																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; Transform position into world space using all bones																								; LINEINFO(macros.vsh)(743)
; denormalize d3dcolor to matrix index																								; LINEINFO(macros.vsh)(744)
mad r2, v2, c3.z, c3.w																								; LINEINFO(macros.vsh)(745)
; r11 = boneindices at this point																								; LINEINFO(macros.vsh)(751)
; first matrix																								; LINEINFO(macros.vsh)(752)
mov a0.x, r2.z																								; LINEINFO(macros.vsh)(753)
mul r3, v1.x, c[a0.x]																								; LINEINFO(macros.vsh)(754)
mul r4, v1.x, c[a0.x+1]																								; LINEINFO(macros.vsh)(755)
mul r5, v1.x, c[a0.x+2]																								; LINEINFO(macros.vsh)(756)
; second matrix																								; LINEINFO(macros.vsh)(757)
mov a0.x, r2.y																								; LINEINFO(macros.vsh)(758)
mad r3, v1.y, c[a0.x], r3																								; LINEINFO(macros.vsh)(759)
mad r4, v1.y, c[a0.x+1], r4																								; LINEINFO(macros.vsh)(760)
mad r5, v1.y, c[a0.x+2], r5																								; LINEINFO(macros.vsh)(761)
; Calculate third weight																								; LINEINFO(macros.vsh)(763)
; compute 1-(weight1+weight2) to calculate weight2																								; LINEINFO(macros.vsh)(764)
; Use r2.w as a temp since we aren't using it for anything.																								; LINEINFO(macros.vsh)(765)
add r2.w, v1.x, v1.y																								; LINEINFO(macros.vsh)(766)
sub r2.w, c0.y, r2.w																								; LINEINFO(macros.vsh)(767)
; third matrix																								; LINEINFO(macros.vsh)(769)
mov a0.x, r2.x																								; LINEINFO(macros.vsh)(770)
mad r3, r2.w, c[a0.x], r3																								; LINEINFO(macros.vsh)(771)
mad r4, r2.w, c[a0.x+1], r4																								; LINEINFO(macros.vsh)(772)
mad r5, r2.w, c[a0.x+2], r5																								; LINEINFO(macros.vsh)(773)
dp4 r0.x, v0, r3																								; LINEINFO(macros.vsh)(775)
dp4 r0.y, v0, r4																								; LINEINFO(macros.vsh)(776)
dp4 r0.z, v0, r5																								; LINEINFO(macros.vsh)(777)
mov r0.w, c0.y																								; LINEINFO(macros.vsh)(778)
; normal																								; LINEINFO(macros.vsh)(780)
dp3 r1.x, v3, r3																								; LINEINFO(macros.vsh)(781)
dp3 r1.y, v3, r4																								; LINEINFO(macros.vsh)(782)
dp3 r1.z, v3, r5																								; LINEINFO(macros.vsh)(783)
; FreeRegister $boneIndices = r2																								; LINEINFO(macros.vsh)(224)
;	if( $boneIndices ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $boneIndices																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix0 = r3																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix0 ne g_allocatedname[r3] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r3																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix0																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix1 = r4																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix1 ne g_allocatedname[r4] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r4																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix1																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $blendedMatrix2 = r5																								; LINEINFO(macros.vsh)(224)
;	if( $blendedMatrix2 ne g_allocatedname[r5] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r5																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $blendedMatrix2																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
;------------------------------------------------------------------------------																								; LINEINFO(DebugTangentSpace.vsh)(15)
; Transform the position from world to view space																								; LINEINFO(DebugTangentSpace.vsh)(16)
;------------------------------------------------------------------------------																								; LINEINFO(DebugTangentSpace.vsh)(17)
; AllocateRegister $projPos = r2																								; LINEINFO(macros.vsh)(208)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldPos = r0																								; LINEINFO(macros.vsh)(191)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
dp4 r2.x, r0, c8																								; LINEINFO(DebugTangentSpace.vsh)(21)
dp4 r2.y, r0, c9																								; LINEINFO(DebugTangentSpace.vsh)(22)
dp4 r2.z, r0, c10																								; LINEINFO(DebugTangentSpace.vsh)(23)
dp4 r2.w, r0, c11																								; LINEINFO(DebugTangentSpace.vsh)(24)
mov oPos, r2																								; LINEINFO(DebugTangentSpace.vsh)(25)
; FreeRegister $worldPos = r0																								; LINEINFO(macros.vsh)(224)
;	if( $worldPos ne g_allocatedname[r0] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r0																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
; $projPos = r2																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; stick the normal in the color channel																								; LINEINFO(DebugTangentSpace.vsh)(29)
mov oD0.xyz, r1.xyz																								; LINEINFO(DebugTangentSpace.vsh)(30)
mov oD0.w, c0.y				; make sure all components are defined																								; LINEINFO(DebugTangentSpace.vsh)(31)
; FreeRegister $projPos = r2																								; LINEINFO(macros.vsh)(224)
;	if( $projPos ne g_allocatedname[r2] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r2																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $projPos																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
; $worldNormal = r1																								; LINEINFO(macros.vsh)(191)
;																								; LINEINFO(macros.vsh)(194)
; FreeRegister $worldNormal = r1																								; LINEINFO(macros.vsh)(224)
;	if( $worldNormal ne g_allocatedname[r1] )																								; LINEINFO(macros.vsh)(232)
;	{																								; LINEINFO(macros.vsh)(233)
;		; Error freeing r1																								; LINEINFO(macros.vsh)(234)
;		mov compileerror, freed unallocated register $worldNormal																								; LINEINFO(macros.vsh)(235)
;	}																								; LINEINFO(macros.vsh)(236)
; USED REGISTERS																								; LINEINFO(macros.vsh)(186)
;																								; LINEINFO(macros.vsh)(194)
